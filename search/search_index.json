{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Introduction"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"dichotic-listening/","text":"Dichotic Listening Tutorial This tutorial covers creating a dichotic listening task. It's aimed at new users, but contains some advanced features that might be of interest to experienced users too. Topics covered include: Creating a simple timeline Using audio files, including how to preload and common problems with audio. Using timeline variables to construct a series of trials Processing text response data to record whether the participant responded in the expected way. Video Link Watch the tutorial on YouTube Experiment link Try the completed experiment","title":"Dicotic-listening"},{"location":"dichotic-listening/#dichotic-listening-tutorial","text":"This tutorial covers creating a dichotic listening task. It's aimed at new users, but contains some advanced features that might be of interest to experienced users too. Topics covered include: Creating a simple timeline Using audio files, including how to preload and common problems with audio. Using timeline variables to construct a series of trials Processing text response data to record whether the participant responded in the expected way.","title":"Dichotic Listening Tutorial"},{"location":"dichotic-listening/#video-link","text":"Watch the tutorial on YouTube","title":"Video Link"},{"location":"dichotic-listening/#experiment-link","text":"Try the completed experiment","title":"Experiment link"},{"location":"flanker/","text":"jsPsych \"Hello world\" experiment In the long tradition of \"Hello world!\" examples, this tutorial creates an experiment that outputs the phrase \"Hello world!\" to the browser. Though useless as an actual experiment, the process is helpful for learning the basics of using the jsPsych library. This tutorial will assume that you know very little about how to set up a web page. Step 1: Download the jsPsych library Start by downloading the jsPsych library. The most recent version can always be found on the GitHub releases page . Note: the image below shows version 4.2, but the process is the same for the most recent version. Step 2: Create a folder to store your experiment files Create a folder on your computer to put the experiment files in. Once you've created the folder, open the downloaded archive from step 1, and move the extracted folder (called jspsych-6.0.5 if using v6.0.5 of jsPsych) into the experiment folder. Here's what it looks like on a Windows machine: Step 3: Create a new HTML file To edit jsPsych code you'll need a programming-friendly text editor. Some free options are: Atom (Windows, OSX, Linux) VSCode (Windows, OSX, Linux) Once you've got a text editor that you like, create a new file in the experiment folder called experiment.html Step 4: Add the bare-minimum HTML code There's some basic code that (nearly) all HTML documents have in common. Here's a typical bare-bones HTML document. <!DOCTYPE html> <html> <head> <title>My experiment</title> </head> <body></body> </html> Add the above code to the experiment.html file and save it. If you then open the file in a web browser, you should see a blank page and the title of the page will be 'My experiment'. Step 5: Import the jsPsych library To use jsPsych, add a <script> tag to import the library. <!DOCTYPE html> <html> <head> <title>My experiment</title> <script src=\"jspsych-6.0.5/jspsych.js\"></script> </head> <body></body> </html> You may also want to import the jsPsych stylesheet, which applies a basic set of visual styles to the experiment to make it visually pleasing. This requires adding a <link> tag to the <head> section of the document. <!DOCTYPE html> <html> <head> <title>My experiment</title> <script src=\"jspsych-6.0.5/jspsych.js\"></script> <link href=\"jspsych-6.0.5/css/jspsych.css\" rel=\"stylesheet\" type=\"text/css\"></link> </head> <body></body> </html> Step 6: Use the jspsych-html-keyboard-response plugin to print a message For the demo, we want to show some text on the screen. This is exactly what the jspsych-html-keyboard-response plugin is designed to do. To use the plugin, we need to load it with a <script> tag. <!DOCTYPE html> <html> <head> <title>My experiment</title> <script src=\"jspsych-6.0.5/jspsych.js\"></script> <script src=\"jspsych-6.0.5/plugins/jspsych-html-keyboard-response.js\"></script> <link href=\"jspsych-6.0.5/css/jspsych.css\" rel=\"stylesheet\" type=\"text/css\"></link> </head> <body></body> </html> Once the plugin is loaded, we can create an experiment using the plugin. To declare a trial that uses the html-keyboard-response plugin, we create a JavaScript object with the property type equal to 'html-keyboard-response' . Then we can specify the other parameters of the plugin in the same object. To add JavaScript code directly to the webpage we need to add a set of <script> tags after the <body> tags. <!DOCTYPE html> <html> <head> <title>My experiment</title> <script src=\"jspsych-6.0.5/jspsych.js\"></script> <script src=\"jspsych-6.0.5/plugins/jspsych-html-keyboard-response.js\"></script> <link href=\"jspsych-6.0.5/css/jspsych.css\" rel=\"stylesheet\" type=\"text/css\"></link> </head> <body></body> <script> var hello_trial = { type: 'html-keyboard-response', stimulus: 'Hello world!' } </script> </html> Now that we have the trial defined we just need to tell jsPsych to run an experiment consisting of this trial. This requires using the jsPsych.init function and specifying the timeline parameter. <!DOCTYPE html> <html> <head> <title>My experiment</title> <script src=\"jspsych-6.0.5/jspsych.js\"></script> <script src=\"jspsych-6.0.5/plugins/jspsych-html-keyboard-response.js\"></script> <link href=\"jspsych-6.0.5/css/jspsych.css\" rel=\"stylesheet\" type=\"text/css\"></link> </head> <body></body> <script> var hello_trial = { type: 'html-keyboard-response', stimulus: 'Hello world!' } jsPsych.init({ timeline: [hello_trial] }) </script> </html> Once you've saved the file, open it in a browser. You should see \"Hello world!\" printed on the screen, and if you press a key on the keyboard, the text should disappear (ending the trial).","title":"Flanker task"},{"location":"flanker/#jspsych-hello-world-experiment","text":"In the long tradition of \"Hello world!\" examples, this tutorial creates an experiment that outputs the phrase \"Hello world!\" to the browser. Though useless as an actual experiment, the process is helpful for learning the basics of using the jsPsych library. This tutorial will assume that you know very little about how to set up a web page.","title":"jsPsych \"Hello world\" experiment"},{"location":"flanker/#step-1-download-the-jspsych-library","text":"Start by downloading the jsPsych library. The most recent version can always be found on the GitHub releases page . Note: the image below shows version 4.2, but the process is the same for the most recent version.","title":"Step 1: Download the jsPsych library"},{"location":"flanker/#step-2-create-a-folder-to-store-your-experiment-files","text":"Create a folder on your computer to put the experiment files in. Once you've created the folder, open the downloaded archive from step 1, and move the extracted folder (called jspsych-6.0.5 if using v6.0.5 of jsPsych) into the experiment folder. Here's what it looks like on a Windows machine:","title":"Step 2: Create a folder to store your experiment files"},{"location":"flanker/#step-3-create-a-new-html-file","text":"To edit jsPsych code you'll need a programming-friendly text editor. Some free options are: Atom (Windows, OSX, Linux) VSCode (Windows, OSX, Linux) Once you've got a text editor that you like, create a new file in the experiment folder called experiment.html","title":"Step 3: Create a new HTML file"},{"location":"flanker/#step-4-add-the-bare-minimum-html-code","text":"There's some basic code that (nearly) all HTML documents have in common. Here's a typical bare-bones HTML document. <!DOCTYPE html> <html> <head> <title>My experiment</title> </head> <body></body> </html> Add the above code to the experiment.html file and save it. If you then open the file in a web browser, you should see a blank page and the title of the page will be 'My experiment'.","title":"Step 4: Add the bare-minimum HTML code"},{"location":"flanker/#step-5-import-the-jspsych-library","text":"To use jsPsych, add a <script> tag to import the library. <!DOCTYPE html> <html> <head> <title>My experiment</title> <script src=\"jspsych-6.0.5/jspsych.js\"></script> </head> <body></body> </html> You may also want to import the jsPsych stylesheet, which applies a basic set of visual styles to the experiment to make it visually pleasing. This requires adding a <link> tag to the <head> section of the document. <!DOCTYPE html> <html> <head> <title>My experiment</title> <script src=\"jspsych-6.0.5/jspsych.js\"></script> <link href=\"jspsych-6.0.5/css/jspsych.css\" rel=\"stylesheet\" type=\"text/css\"></link> </head> <body></body> </html>","title":"Step 5: Import the jsPsych library"},{"location":"flanker/#step-6-use-the-jspsych-html-keyboard-response-plugin-to-print-a-message","text":"For the demo, we want to show some text on the screen. This is exactly what the jspsych-html-keyboard-response plugin is designed to do. To use the plugin, we need to load it with a <script> tag. <!DOCTYPE html> <html> <head> <title>My experiment</title> <script src=\"jspsych-6.0.5/jspsych.js\"></script> <script src=\"jspsych-6.0.5/plugins/jspsych-html-keyboard-response.js\"></script> <link href=\"jspsych-6.0.5/css/jspsych.css\" rel=\"stylesheet\" type=\"text/css\"></link> </head> <body></body> </html> Once the plugin is loaded, we can create an experiment using the plugin. To declare a trial that uses the html-keyboard-response plugin, we create a JavaScript object with the property type equal to 'html-keyboard-response' . Then we can specify the other parameters of the plugin in the same object. To add JavaScript code directly to the webpage we need to add a set of <script> tags after the <body> tags. <!DOCTYPE html> <html> <head> <title>My experiment</title> <script src=\"jspsych-6.0.5/jspsych.js\"></script> <script src=\"jspsych-6.0.5/plugins/jspsych-html-keyboard-response.js\"></script> <link href=\"jspsych-6.0.5/css/jspsych.css\" rel=\"stylesheet\" type=\"text/css\"></link> </head> <body></body> <script> var hello_trial = { type: 'html-keyboard-response', stimulus: 'Hello world!' } </script> </html> Now that we have the trial defined we just need to tell jsPsych to run an experiment consisting of this trial. This requires using the jsPsych.init function and specifying the timeline parameter. <!DOCTYPE html> <html> <head> <title>My experiment</title> <script src=\"jspsych-6.0.5/jspsych.js\"></script> <script src=\"jspsych-6.0.5/plugins/jspsych-html-keyboard-response.js\"></script> <link href=\"jspsych-6.0.5/css/jspsych.css\" rel=\"stylesheet\" type=\"text/css\"></link> </head> <body></body> <script> var hello_trial = { type: 'html-keyboard-response', stimulus: 'Hello world!' } jsPsych.init({ timeline: [hello_trial] }) </script> </html> Once you've saved the file, open it in a browser. You should see \"Hello world!\" printed on the screen, and if you press a key on the keyboard, the text should disappear (ending the trial).","title":"Step 6: Use the jspsych-html-keyboard-response plugin to print a message"},{"location":"hello-world/","text":"jsPsych \"Hello world\" experiment In the long tradition of \"Hello world!\" examples, this tutorial creates an experiment that outputs the phrase \"Hello world!\" to the browser. Though useless as an actual experiment, the process is helpful for learning the basics of using the jsPsych library. This tutorial will assume that you know very little about how to set up a web page. Step 1: Download the jsPsych library Start by downloading the jsPsych library. The most recent version can always be found on the GitHub releases page . Note: the image below shows version 4.2, but the process is the same for the most recent version. Step 2: Create a folder to store your experiment files Create a folder on your computer to put the experiment files in. Once you've created the folder, open the downloaded archive from step 1, and move the extracted folder (called jspsych-6.0.5 if using v6.0.5 of jsPsych) into the experiment folder. Here's what it looks like on a Windows machine: Step 3: Create a new HTML file To edit jsPsych code you'll need a programming-friendly text editor. Some free options are: Atom (Windows, OSX, Linux) VSCode (Windows, OSX, Linux) Once you've got a text editor that you like, create a new file in the experiment folder called experiment.html Step 4: Add the bare-minimum HTML code There's some basic code that (nearly) all HTML documents have in common. Here's a typical bare-bones HTML document. <!DOCTYPE html> <html> <head> <title>My experiment</title> </head> <body></body> </html> Add the above code to the experiment.html file and save it. If you then open the file in a web browser, you should see a blank page and the title of the page will be 'My experiment'. Step 5: Import the jsPsych library To use jsPsych, add a <script> tag to import the library. <!DOCTYPE html> <html> <head> <title>My experiment</title> <script src=\"jspsych-6.0.5/jspsych.js\"></script> </head> <body></body> </html> You may also want to import the jsPsych stylesheet, which applies a basic set of visual styles to the experiment to make it visually pleasing. This requires adding a <link> tag to the <head> section of the document. <!DOCTYPE html> <html> <head> <title>My experiment</title> <script src=\"jspsych-6.0.5/jspsych.js\"></script> <link href=\"jspsych-6.0.5/css/jspsych.css\" rel=\"stylesheet\" type=\"text/css\"></link> </head> <body></body> </html> Step 6: Use the jspsych-html-keyboard-response plugin to print a message For the demo, we want to show some text on the screen. This is exactly what the jspsych-html-keyboard-response plugin is designed to do. To use the plugin, we need to load it with a <script> tag. <!DOCTYPE html> <html> <head> <title>My experiment</title> <script src=\"jspsych-6.0.5/jspsych.js\"></script> <script src=\"jspsych-6.0.5/plugins/jspsych-html-keyboard-response.js\"></script> <link href=\"jspsych-6.0.5/css/jspsych.css\" rel=\"stylesheet\" type=\"text/css\"></link> </head> <body></body> </html> Once the plugin is loaded, we can create an experiment using the plugin. To declare a trial that uses the html-keyboard-response plugin, we create a JavaScript object with the property type equal to 'html-keyboard-response' . Then we can specify the other parameters of the plugin in the same object. To add JavaScript code directly to the webpage we need to add a set of <script> tags after the <body> tags. <!DOCTYPE html> <html> <head> <title>My experiment</title> <script src=\"jspsych-6.0.5/jspsych.js\"></script> <script src=\"jspsych-6.0.5/plugins/jspsych-html-keyboard-response.js\"></script> <link href=\"jspsych-6.0.5/css/jspsych.css\" rel=\"stylesheet\" type=\"text/css\"></link> </head> <body></body> <script> var hello_trial = { type: 'html-keyboard-response', stimulus: 'Hello world!' } </script> </html> Now that we have the trial defined we just need to tell jsPsych to run an experiment consisting of this trial. This requires using the jsPsych.init function and specifying the timeline parameter. <!DOCTYPE html> <html> <head> <title>My experiment</title> <script src=\"jspsych-6.0.5/jspsych.js\"></script> <script src=\"jspsych-6.0.5/plugins/jspsych-html-keyboard-response.js\"></script> <link href=\"jspsych-6.0.5/css/jspsych.css\" rel=\"stylesheet\" type=\"text/css\"></link> </head> <body></body> <script> var hello_trial = { type: 'html-keyboard-response', stimulus: 'Hello world!' } jsPsych.init({ timeline: [hello_trial] }) </script> </html> Once you've saved the file, open it in a browser. You should see \"Hello world!\" printed on the screen, and if you press a key on the keyboard, the text should disappear (ending the trial).","title":"Hello-world"},{"location":"hello-world/#jspsych-hello-world-experiment","text":"In the long tradition of \"Hello world!\" examples, this tutorial creates an experiment that outputs the phrase \"Hello world!\" to the browser. Though useless as an actual experiment, the process is helpful for learning the basics of using the jsPsych library. This tutorial will assume that you know very little about how to set up a web page.","title":"jsPsych \"Hello world\" experiment"},{"location":"hello-world/#step-1-download-the-jspsych-library","text":"Start by downloading the jsPsych library. The most recent version can always be found on the GitHub releases page . Note: the image below shows version 4.2, but the process is the same for the most recent version.","title":"Step 1: Download the jsPsych library"},{"location":"hello-world/#step-2-create-a-folder-to-store-your-experiment-files","text":"Create a folder on your computer to put the experiment files in. Once you've created the folder, open the downloaded archive from step 1, and move the extracted folder (called jspsych-6.0.5 if using v6.0.5 of jsPsych) into the experiment folder. Here's what it looks like on a Windows machine:","title":"Step 2: Create a folder to store your experiment files"},{"location":"hello-world/#step-3-create-a-new-html-file","text":"To edit jsPsych code you'll need a programming-friendly text editor. Some free options are: Atom (Windows, OSX, Linux) VSCode (Windows, OSX, Linux) Once you've got a text editor that you like, create a new file in the experiment folder called experiment.html","title":"Step 3: Create a new HTML file"},{"location":"hello-world/#step-4-add-the-bare-minimum-html-code","text":"There's some basic code that (nearly) all HTML documents have in common. Here's a typical bare-bones HTML document. <!DOCTYPE html> <html> <head> <title>My experiment</title> </head> <body></body> </html> Add the above code to the experiment.html file and save it. If you then open the file in a web browser, you should see a blank page and the title of the page will be 'My experiment'.","title":"Step 4: Add the bare-minimum HTML code"},{"location":"hello-world/#step-5-import-the-jspsych-library","text":"To use jsPsych, add a <script> tag to import the library. <!DOCTYPE html> <html> <head> <title>My experiment</title> <script src=\"jspsych-6.0.5/jspsych.js\"></script> </head> <body></body> </html> You may also want to import the jsPsych stylesheet, which applies a basic set of visual styles to the experiment to make it visually pleasing. This requires adding a <link> tag to the <head> section of the document. <!DOCTYPE html> <html> <head> <title>My experiment</title> <script src=\"jspsych-6.0.5/jspsych.js\"></script> <link href=\"jspsych-6.0.5/css/jspsych.css\" rel=\"stylesheet\" type=\"text/css\"></link> </head> <body></body> </html>","title":"Step 5: Import the jsPsych library"},{"location":"hello-world/#step-6-use-the-jspsych-html-keyboard-response-plugin-to-print-a-message","text":"For the demo, we want to show some text on the screen. This is exactly what the jspsych-html-keyboard-response plugin is designed to do. To use the plugin, we need to load it with a <script> tag. <!DOCTYPE html> <html> <head> <title>My experiment</title> <script src=\"jspsych-6.0.5/jspsych.js\"></script> <script src=\"jspsych-6.0.5/plugins/jspsych-html-keyboard-response.js\"></script> <link href=\"jspsych-6.0.5/css/jspsych.css\" rel=\"stylesheet\" type=\"text/css\"></link> </head> <body></body> </html> Once the plugin is loaded, we can create an experiment using the plugin. To declare a trial that uses the html-keyboard-response plugin, we create a JavaScript object with the property type equal to 'html-keyboard-response' . Then we can specify the other parameters of the plugin in the same object. To add JavaScript code directly to the webpage we need to add a set of <script> tags after the <body> tags. <!DOCTYPE html> <html> <head> <title>My experiment</title> <script src=\"jspsych-6.0.5/jspsych.js\"></script> <script src=\"jspsych-6.0.5/plugins/jspsych-html-keyboard-response.js\"></script> <link href=\"jspsych-6.0.5/css/jspsych.css\" rel=\"stylesheet\" type=\"text/css\"></link> </head> <body></body> <script> var hello_trial = { type: 'html-keyboard-response', stimulus: 'Hello world!' } </script> </html> Now that we have the trial defined we just need to tell jsPsych to run an experiment consisting of this trial. This requires using the jsPsych.init function and specifying the timeline parameter. <!DOCTYPE html> <html> <head> <title>My experiment</title> <script src=\"jspsych-6.0.5/jspsych.js\"></script> <script src=\"jspsych-6.0.5/plugins/jspsych-html-keyboard-response.js\"></script> <link href=\"jspsych-6.0.5/css/jspsych.css\" rel=\"stylesheet\" type=\"text/css\"></link> </head> <body></body> <script> var hello_trial = { type: 'html-keyboard-response', stimulus: 'Hello world!' } jsPsych.init({ timeline: [hello_trial] }) </script> </html> Once you've saved the file, open it in a browser. You should see \"Hello world!\" printed on the screen, and if you press a key on the keyboard, the text should disappear (ending the trial).","title":"Step 6: Use the jspsych-html-keyboard-response plugin to print a message"},{"location":"n-back/","text":"N-Back Tutorial This tutorial covers creating an n-back task using timeline variables and dynamic parameters. The techniques covered here are probably useful in circumstances where you want to generate a sequence of trials that have some dependencies (like the current trial must sometimes be the same as the trial two items ago) and don't want to manually code a fixed sequence of items. Video Link Watch the tutorial on YouTube Experiment link Try the completed experiment Full experiment The video tutorial walks through setting up the n-back task but doesn't go through setting up instructions or showing the participant their data at the end. The full-experiment.html code adds both of these features. You can try the full experiment here .","title":"N-back task"},{"location":"n-back/#n-back-tutorial","text":"This tutorial covers creating an n-back task using timeline variables and dynamic parameters. The techniques covered here are probably useful in circumstances where you want to generate a sequence of trials that have some dependencies (like the current trial must sometimes be the same as the trial two items ago) and don't want to manually code a fixed sequence of items.","title":"N-Back Tutorial"},{"location":"n-back/#video-link","text":"Watch the tutorial on YouTube","title":"Video Link"},{"location":"n-back/#experiment-link","text":"Try the completed experiment","title":"Experiment link"},{"location":"n-back/#full-experiment","text":"The video tutorial walks through setting up the n-back task but doesn't go through setting up instructions or showing the participant their data at the end. The full-experiment.html code adds both of these features. You can try the full experiment here .","title":"Full experiment"},{"location":"rt-task/","text":"","title":"Reaction-time task"}]}