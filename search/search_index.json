{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the jsPsych in Qualtrics Tutorial Series This tutorial aims to provide an easy-to-follow guide for using jsPsych with Qualtrics. This tutorial assumes that readers are familiar with Qualtrics and have a basic understanding of HTML, CSS, JavaScript, and GitHub. If you are looking for Qualtrics tutorials, there are other excellent tutorials available, as well as Qualtrics' official support page. For example, CSULB Qualtrics Guide UNTHSC Qualtrics User Guide If you are looking for jsPsych tutorial, the best place to start is the jsPsych Hello World! tutorial . You should also look at the YouTube tutorial from Josh de Leeuw . jsPsych in Qualtrics Tutorial Series Making jsPsych files loadable in Qualtrics Hello World! Reaction Time Task Flanker Task (forthcoming) N-Back Task (forthcoming) Backward Digit Span Task (forthcoming) Dichotic Listening Task (forthcoming) Dual N-Back Task (forthcoming) Pairwise Image Rating Task (forthcoming) Choose-And-Solve Task (forthcoming)","title":"Introduction"},{"location":"#welcome-to-the-jspsych-in-qualtrics-tutorial-series","text":"This tutorial aims to provide an easy-to-follow guide for using jsPsych with Qualtrics. This tutorial assumes that readers are familiar with Qualtrics and have a basic understanding of HTML, CSS, JavaScript, and GitHub. If you are looking for Qualtrics tutorials, there are other excellent tutorials available, as well as Qualtrics' official support page. For example, CSULB Qualtrics Guide UNTHSC Qualtrics User Guide If you are looking for jsPsych tutorial, the best place to start is the jsPsych Hello World! tutorial . You should also look at the YouTube tutorial from Josh de Leeuw .","title":"Welcome to the jsPsych in Qualtrics Tutorial Series"},{"location":"#jspsych-in-qualtrics-tutorial-series","text":"Making jsPsych files loadable in Qualtrics Hello World! Reaction Time Task Flanker Task (forthcoming) N-Back Task (forthcoming) Backward Digit Span Task (forthcoming) Dichotic Listening Task (forthcoming) Dual N-Back Task (forthcoming) Pairwise Image Rating Task (forthcoming) Choose-And-Solve Task (forthcoming)","title":"jsPsych in Qualtrics Tutorial Series"},{"location":"dichotic-listening/","text":"Dichotic Listening Tutorial This tutorial covers creating a dichotic listening task. It's aimed at new users, but contains some advanced features that might be of interest to experienced users too. Topics covered include: Creating a simple timeline Using audio files, including how to preload and common problems with audio. Using timeline variables to construct a series of trials Processing text response data to record whether the participant responded in the expected way. Video Link Watch the tutorial on YouTube Experiment link Try the completed experiment","title":"Dichotic Listening Tutorial"},{"location":"dichotic-listening/#dichotic-listening-tutorial","text":"This tutorial covers creating a dichotic listening task. It's aimed at new users, but contains some advanced features that might be of interest to experienced users too. Topics covered include: Creating a simple timeline Using audio files, including how to preload and common problems with audio. Using timeline variables to construct a series of trials Processing text response data to record whether the participant responded in the expected way.","title":"Dichotic Listening Tutorial"},{"location":"dichotic-listening/#video-link","text":"Watch the tutorial on YouTube","title":"Video Link"},{"location":"dichotic-listening/#experiment-link","text":"Try the completed experiment","title":"Experiment link"},{"location":"flanker/","text":"Eriksen Flanker Task The flanker task is a popular task to measure response inhibition. In the variant presented here, participants are required to judge whether an arrow presented between four other arrows is pointing in the same or the opposite direction by pressing a key on the keyboard. We will create a 100-trial long version of this task which provides feedback on the participant's performance at the end of the experiment. Part 1: Setting up the HTML file As always, we need to create an HTML file which references the Javascript plugins and CSS required. For this experiment, we will only use the jspsych-text and jspsych-single-stim plugins which can be specified in the <head> of the file. <!doctype html> <html> <head> <title>Flanker Task</title> <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js\"></script> <script src=\"jspsych.js\"></script> <script src=\"plugins/jspsych-text.js\"></script> <script src=\"plugins/jspsych-single-stim.js\"></script> <link href=\"css/jspsych.css\" rel=\"stylesheet\" type=\"text/css\"> </head> <body> </body> </html> Part 2: Adding welcome and instructions block and starting the experiment This is also very straightforward. We present a welcome message as well as the instructions in two separate blocks. Of course, this text can be adapted according to what you want to focus on. Here, we're just saying that the task is to press one of two buttons in response to the middle arrow displayed on the screen. Note that after the participants read the instructions, they can start the experiment by pressing the ENTER key (defined as key 13). The first trial then starts 3000 ms after that button press. These options obviously can be changed as well. var welcome = { type: \"text\", text: \"<p style='margin:20%'>Welcome to the experiment. Press any key to begin.</p>\" }; var instructions = { type: \"text\", text: \"<p style='margin-top:20%; margin-right:10%'>In this task you are required to respond to \" + \"stimuli displayed on the screen. In the following, you will see five arrows. Your task \" + \"is to decide as quickly as possible if the arrow in the middle is pointing in the same \" + \"direction as the others or not. If this is the case ('<strong><<<<<</strong>' or \" + \"'<strong>>>>>></strong>'), please press the left arrow button on the keyboard. If the \" + \"middle arrow is pointing in the opposite direction ('<strong><<><<</strong>' or \" + \"'<strong>>><>></strong>'), please press the right arrow button on the keyboard. You can \" + \"start the experiment by pressing ENTER.</p>\", timing_post_trial: 3000 }; Both blocks need to be added to the timeline of the experiment. var timeline = []; timeline.push(welcome); timeline.push(instructions); Finally, we need to initiate the experiment by adding this piece of code at the bottom: jsPsych.init({ timeline: timeline, on_finish: function() { jsPsych.data.displayData(); } ); If you are unsure about any of this, go back to the [tutorial for running a simple reaction time task] (http://docs.jspsych.org/tutorials/rt-task/). The code so far: <!doctype html> <html> <head> <title>Flanker Task</title> <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js\"></script> <script src=\"jspsych.js\"></script> <script src=\"plugins/jspsych-text.js\"></script> <script src=\"plugins/jspsych-single-stim.js\"></script> <link href=\"css/jspsych.css\" rel=\"stylesheet\" type=\"text/css\"> </head> <body> </body> <script> /*set up welcome block*/ var welcome = { type: \"text\", text: \"<p style='margin:20%'>Welcome to the experiment. Press any key to begin.</p>\" }; /*set up instructions block*/ var instructions = { type: \"text\", text: \"<p style='margin-top:20%; margin-right:10%'>In this task you are required to respond to \" + \"stimuli displayed on the screen. In the following, you will see five arrows. Your task \" + \"is to decide as quickly as possible if the arrow in the middle is pointing in the same \" + \"direction as the others or not. If this is the case ('<strong><<<<<</strong>' or \" + \"'<strong>>>>>></strong>'), please press the left arrow button on the keyboard. If the \" + \"middle arrow is pointing in the opposite direction ('<strong><<><<</strong>' or \" + \"'<strong>>><>></strong>'), please press the right arrow button on the keyboard. You can \" + \"start the experiment by pressing ENTER.</p>\", timing_post_trial: 3000 }; /*set up experiment structure*/ var timeline = []; timeline.push(welcome); timeline.push(instructions); /*start experiment*/ jsPsych.init({ timeline: timeline, on_finish: function() { jsPsych.data.displayData(); } ); </script> </html> If you run this code in your browser, you should see the welcome message as well as the instructions. Next, we need to define which stimuli we are going to use for the experiment. Part 3: Defining the stimuli For this experiment we are using four image files which are stored in the img folder. First, we need to define them as being the test_stimuli we want to use. At the same time, we can also define specific attributes per stimulus. For instance, we might want to keep track of the congruency of the stimuli, regardless of the direction in which they are pointing. To do this, we don't just define the location of the stimulus image in the stimulus , but also an additional attribute in the data line. Note that this information will automatically be stored in your result file. You can add whatever extra information you might need here. var test_stimuli = [ { stimulus: \"img/con1.png\", data: { phase: 'congruent'} }, { stimulus: \"img/con2.png\", data: { phase: 'congruent'} }, { stimulus: \"img/inc1.png\", data: { phase: 'incongruent'} }, { stimulus: \"img/inc2.png\", data: { phase: 'incongruent'} } ]; Now that we have defined our stimuli, we want them to be displayed and repeated in a random order. This can easily be done by using the randomisation code implemented in jsPsych. We simply create a variable which we call all_trials that is going to display each stimulus x times, x being the number you define. Let's say we want a 100-trial experiment: var all_trials = jsPsych.randomization.repeat(test_stimuli, 25); We also want the inter-stimulus interval to be variable, so we define a post_trial_gap . This will use a random value between 1000 and 2000 ms, with uniform sampling from the range. Again, you can modify these parameters as you please. var post_trial_gap = function() { return Math.floor(Math.random() * 1500) + 500; }; Part 4: Creating an experimental block So far, we have set up a welcome message, an instructions block, and the stimuli for our experiment. Now comes the most important part, that is, creating our test_block . It is supported by the single-stim plugin, so this information needs to go in first. Then, we defined the left and right arrow of the keyboard as our response keys, so their keycodes (37 and 39; look up your required keycodes here ) need to be defined in the choices tag. We want each stimulus to be presented for 1500 ms at most, which should be defined in timing_response . Finally, we need to state which stimuli we need to add the information we created in the previous steps, i.e., defining all_trials as our stimulus variable and post_trial_gap as our inter-stimulus interval. var test_block = { type: 'single-stim', choices: [37, 39], timing_response: 1500, timeline: all_trials, timing_post_trial: post_trial_gap }; Of course, this block also needs to be added to the experiment's timeline: timeline.push(test_block); The code so far: <!doctype html> <html> <head> <title>Flanker Task</title> <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js\"></script> <script src=\"jspsych.js\"></script> <script src=\"plugins/jspsych-text.js\"></script> <script src=\"plugins/jspsych-single-stim.js\"></script> <link href=\"css/jspsych.css\" rel=\"stylesheet\" type=\"text/css\"> </head> <body> </body> <script> /*set up welcome block*/ var welcome = { type: \"text\", text: \"<p style='margin:20%'>Welcome to the experiment. Press any key to begin.</p>\" }; /*set up instructions block*/ var instructions = { type: \"text\", text: \"<p style='margin-top:20%; margin-right:10%'>In this task you are required to respond to \" + \"stimuli displayed on the screen. In the following, you will see five arrows. Your task \" + \"is to decide as quickly as possible if the arrow in the middle is pointing in the same \" + \"direction as the others or not. If this is the case ('<strong><<<<<</strong>' or \" + \"'<strong>>>>>></strong>'), please press the left arrow button on the keyboard. If the \" + \"middle arrow is pointing in the opposite direction ('<strong><<><<</strong>' or \" + \"'<strong>>><>></strong>'), please press the right arrow button on the keyboard. You can \" + \"start the experiment by pressing ENTER.</p>\", timing_post_trial: 3000 }; /*defining stimuli*/ var test_stimuli = [ { stimulus: \"img/con1.png\", data: { phase: 'congruent'} }, { stimulus: \"img/con2.png\", data: { phase: 'congruent'} }, { stimulus: \"img/inc1.png\", data: { phase: 'incongruent'} }, { stimulus: \"img/inc2.png\", data: { phase: 'incongruent'} } ]; /*randomising stimuli*/ var all_trials = jsPsych.randomization.repeat(test_stimuli, 25); /*creating random ISI*/ var post_trial_gap = function() { return Math.floor(Math.random() * 1500) + 500; }; /*defining experimental block*/ var test_block = { type: 'single-stim', choices: [37, 39], timing_response: 1500, timeline: all_trials, timing_post_trial: post_trial_gap }; /*set up experiment structure*/ var timeline = []; timeline.push(welcome); timeline.push(instructions); timeline.push(test_block); /*start experiment*/ jsPsych.init({ timeline: timeline, on_finish: function() { jsPsych.data.displayData(); } ); </script> </html> Part 5: Presenting feedback to the participants Running the experiment now will provide you with a welcome message, instructions, and 100 trials. We would like to give the participants feedback about their performance at the end of the experiment. (Note: This was already part of the basic tutorial ). We first need to modify our test_block a bit to define what a correct trial is. var test_block = { type: 'single-stim', choices: [37, 39], timing_response: 1500, on_finish: function(data){ var correct = false; if(data.phase == 'congruent' && data.key_press == '37' && data.rt > -1){ correct = true; } else if(data.phase == 'incongruent' && data.key_press == '39' && data.rt > -1){ correct = true; } jsPsych.data.addDataToLastTrial({correct: correct}); }, timeline: all_trials, timing_post_trial: post_trial_gap }; Essentially, what we're doing here is saying that whenever a congruent stimulus was displayed and the left arrow key was pressed or an incongruent stimulus was displayed and the right arrow key was pressed (and neither of those reactions was later than the 1500 ms limit we defined earlier), the program returns the information that these are correct trials. We want to display both the percentage of correct responses as well as the mean reaction time. For this, we need to add the following function to the code: function getSubjectData() { var trials = jsPsych.data.getTrialsOfType('single-stim'); var sum_rt = 0; var correct_trial_count = 0; var correct_rt_count = 0; for (var i = 0; i < trials.length; i++) { if (trials[i].correct == true) { correct_trial_count++; if(trials[i].rt > -1){ sum_rt += trials[i].rt; correct_rt_count++; } } } return { rt: Math.floor(sum_rt / correct_rt_count), accuracy: Math.floor(correct_trial_count / trials.length * 100) } }; Finally, we add a debriefing block which is displayed after the last trial of the experiment. Don't forget to add this block to the timeline as well! var debrief_block = { type: \"text\", text: function() { var subject_data = getSubjectData(); return \"<p style='margin:20%'>You responded correctly on \"+subject_data.accuracy+\"% of the trials. \" + \"Your average response time was <strong>\" + subject_data.rt + \"ms</strong>. Press any key to complete the \"+ \"experiment. Thank you!</p>\"; } }; The final code: <!doctype html> <html> <head> <title>Flanker Task</title> <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js\"></script> <script src=\"jspsych.js\"></script> <script src=\"plugins/jspsych-text.js\"></script> <script src=\"plugins/jspsych-single-stim.js\"></script> <link href=\"css/jspsych.css\" rel=\"stylesheet\" type=\"text/css\"> </head> <body> </body> <script> /*set up welcome block*/ var welcome = { type: \"text\", text: \"<p style='margin:20%'>Welcome to the experiment. Press any key to begin.</p>\" }; /*set up instructions block*/ var instructions = { type: \"text\", text: \"<p style='margin-top:20%; margin-right:10%'>In this task you are required to respond to \" + \"stimuli displayed on the screen. In the following, you will see five arrows. Your task \" + \"is to decide as quickly as possible if the arrow in the middle is pointing in the same \" + \"direction as the others or not. If this is the case ('<strong><<<<<</strong>' or \" + \"'<strong>>>>>></strong>'), please press the left arrow button on the keyboard. If the \" + \"middle arrow is pointing in the opposite direction ('<strong><<><<</strong>' or \" + \"'<strong>>><>></strong>'), please press the right arrow button on the keyboard. You can \" + \"start the experiment by pressing ENTER.</p>\", timing_post_trial: 3000 }; /*defining stimuli*/ var test_stimuli = [ { stimulus: \"img/con1.png\", data: { phase: 'congruent'} }, { stimulus: \"img/con2.png\", data: { phase: 'congruent'} }, { stimulus: \"img/inc1.png\", data: { phase: 'incongruent'} }, { stimulus: \"img/inc2.png\", data: { phase: 'incongruent'} } ]; /*randomising stimuli*/ var all_trials = jsPsych.randomization.repeat(test_stimuli, 25); /*creating random ISI*/ var post_trial_gap = function() { return Math.floor(Math.random() * 1500) + 500; }; /*defining experimental block*/ var test_block = { type: 'single-stim', choices: [37, 39], timing_response: 1500, on_finish: function(data){ var correct = false; if(data.phase == 'congruent' && data.key_press == '37' && data.rt > -1){ correct = true; } else if(data.phase == 'incongruent' && data.key_press == '39' && data.rt > -1){ correct = true; } jsPsych.data.addDataToLastTrial({correct: correct}); }, timeline: all_trials, timing_post_trial: post_trial_gap }; /*function for getting mean RTs and error rates*/ function getSubjectData() { var trials = jsPsych.data.getTrialsOfType('single-stim'); var sum_rt = 0; var correct_trial_count = 0; var correct_rt_count = 0; for (var i = 0; i < trials.length; i++) { if (trials[i].correct == true) { correct_trial_count++; if(trials[i].rt > -1){ sum_rt += trials[i].rt; correct_rt_count++; } } } return { rt: Math.floor(sum_rt / correct_rt_count), accuracy: Math.floor(correct_trial_count / trials.length * 100) } }; /*defining debriefing block*/ var debrief_block = { type: \"text\", text: function() { var subject_data = getSubjectData(); return \"<p style='margin:20%'>You responded correctly on \"+subject_data.accuracy+\"% of the trials. \" + \"Your average response time was <strong>\" + subject_data.rt + \"ms</strong>. Press any key to complete the \"+ \"experiment. Thank you!</p>\"; } }; /*set up experiment structure*/ var timeline = []; timeline.push(welcome); timeline.push(instructions); timeline.push(test_block); timeline.push(debrief_block); /*start experiment*/ jsPsych.init({ timeline: timeline, on_finish: function() { jsPsych.data.displayData(); } ); </script> </html>","title":"Flanker"},{"location":"flanker/#eriksen-flanker-task","text":"The flanker task is a popular task to measure response inhibition. In the variant presented here, participants are required to judge whether an arrow presented between four other arrows is pointing in the same or the opposite direction by pressing a key on the keyboard. We will create a 100-trial long version of this task which provides feedback on the participant's performance at the end of the experiment.","title":"Eriksen Flanker Task"},{"location":"flanker/#part-1-setting-up-the-html-file","text":"As always, we need to create an HTML file which references the Javascript plugins and CSS required. For this experiment, we will only use the jspsych-text and jspsych-single-stim plugins which can be specified in the <head> of the file. <!doctype html> <html> <head> <title>Flanker Task</title> <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js\"></script> <script src=\"jspsych.js\"></script> <script src=\"plugins/jspsych-text.js\"></script> <script src=\"plugins/jspsych-single-stim.js\"></script> <link href=\"css/jspsych.css\" rel=\"stylesheet\" type=\"text/css\"> </head> <body> </body> </html>","title":"Part 1: Setting up the HTML file"},{"location":"flanker/#part-2-adding-welcome-and-instructions-block-and-starting-the-experiment","text":"This is also very straightforward. We present a welcome message as well as the instructions in two separate blocks. Of course, this text can be adapted according to what you want to focus on. Here, we're just saying that the task is to press one of two buttons in response to the middle arrow displayed on the screen. Note that after the participants read the instructions, they can start the experiment by pressing the ENTER key (defined as key 13). The first trial then starts 3000 ms after that button press. These options obviously can be changed as well. var welcome = { type: \"text\", text: \"<p style='margin:20%'>Welcome to the experiment. Press any key to begin.</p>\" }; var instructions = { type: \"text\", text: \"<p style='margin-top:20%; margin-right:10%'>In this task you are required to respond to \" + \"stimuli displayed on the screen. In the following, you will see five arrows. Your task \" + \"is to decide as quickly as possible if the arrow in the middle is pointing in the same \" + \"direction as the others or not. If this is the case ('<strong><<<<<</strong>' or \" + \"'<strong>>>>>></strong>'), please press the left arrow button on the keyboard. If the \" + \"middle arrow is pointing in the opposite direction ('<strong><<><<</strong>' or \" + \"'<strong>>><>></strong>'), please press the right arrow button on the keyboard. You can \" + \"start the experiment by pressing ENTER.</p>\", timing_post_trial: 3000 }; Both blocks need to be added to the timeline of the experiment. var timeline = []; timeline.push(welcome); timeline.push(instructions); Finally, we need to initiate the experiment by adding this piece of code at the bottom: jsPsych.init({ timeline: timeline, on_finish: function() { jsPsych.data.displayData(); } ); If you are unsure about any of this, go back to the [tutorial for running a simple reaction time task] (http://docs.jspsych.org/tutorials/rt-task/).","title":"Part 2: Adding welcome and instructions block and starting the experiment"},{"location":"flanker/#the-code-so-far","text":"<!doctype html> <html> <head> <title>Flanker Task</title> <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js\"></script> <script src=\"jspsych.js\"></script> <script src=\"plugins/jspsych-text.js\"></script> <script src=\"plugins/jspsych-single-stim.js\"></script> <link href=\"css/jspsych.css\" rel=\"stylesheet\" type=\"text/css\"> </head> <body> </body> <script> /*set up welcome block*/ var welcome = { type: \"text\", text: \"<p style='margin:20%'>Welcome to the experiment. Press any key to begin.</p>\" }; /*set up instructions block*/ var instructions = { type: \"text\", text: \"<p style='margin-top:20%; margin-right:10%'>In this task you are required to respond to \" + \"stimuli displayed on the screen. In the following, you will see five arrows. Your task \" + \"is to decide as quickly as possible if the arrow in the middle is pointing in the same \" + \"direction as the others or not. If this is the case ('<strong><<<<<</strong>' or \" + \"'<strong>>>>>></strong>'), please press the left arrow button on the keyboard. If the \" + \"middle arrow is pointing in the opposite direction ('<strong><<><<</strong>' or \" + \"'<strong>>><>></strong>'), please press the right arrow button on the keyboard. You can \" + \"start the experiment by pressing ENTER.</p>\", timing_post_trial: 3000 }; /*set up experiment structure*/ var timeline = []; timeline.push(welcome); timeline.push(instructions); /*start experiment*/ jsPsych.init({ timeline: timeline, on_finish: function() { jsPsych.data.displayData(); } ); </script> </html> If you run this code in your browser, you should see the welcome message as well as the instructions. Next, we need to define which stimuli we are going to use for the experiment.","title":"The code so far:"},{"location":"flanker/#part-3-defining-the-stimuli","text":"For this experiment we are using four image files which are stored in the img folder. First, we need to define them as being the test_stimuli we want to use. At the same time, we can also define specific attributes per stimulus. For instance, we might want to keep track of the congruency of the stimuli, regardless of the direction in which they are pointing. To do this, we don't just define the location of the stimulus image in the stimulus , but also an additional attribute in the data line. Note that this information will automatically be stored in your result file. You can add whatever extra information you might need here. var test_stimuli = [ { stimulus: \"img/con1.png\", data: { phase: 'congruent'} }, { stimulus: \"img/con2.png\", data: { phase: 'congruent'} }, { stimulus: \"img/inc1.png\", data: { phase: 'incongruent'} }, { stimulus: \"img/inc2.png\", data: { phase: 'incongruent'} } ]; Now that we have defined our stimuli, we want them to be displayed and repeated in a random order. This can easily be done by using the randomisation code implemented in jsPsych. We simply create a variable which we call all_trials that is going to display each stimulus x times, x being the number you define. Let's say we want a 100-trial experiment: var all_trials = jsPsych.randomization.repeat(test_stimuli, 25); We also want the inter-stimulus interval to be variable, so we define a post_trial_gap . This will use a random value between 1000 and 2000 ms, with uniform sampling from the range. Again, you can modify these parameters as you please. var post_trial_gap = function() { return Math.floor(Math.random() * 1500) + 500; };","title":"Part 3: Defining the stimuli"},{"location":"flanker/#part-4-creating-an-experimental-block","text":"So far, we have set up a welcome message, an instructions block, and the stimuli for our experiment. Now comes the most important part, that is, creating our test_block . It is supported by the single-stim plugin, so this information needs to go in first. Then, we defined the left and right arrow of the keyboard as our response keys, so their keycodes (37 and 39; look up your required keycodes here ) need to be defined in the choices tag. We want each stimulus to be presented for 1500 ms at most, which should be defined in timing_response . Finally, we need to state which stimuli we need to add the information we created in the previous steps, i.e., defining all_trials as our stimulus variable and post_trial_gap as our inter-stimulus interval. var test_block = { type: 'single-stim', choices: [37, 39], timing_response: 1500, timeline: all_trials, timing_post_trial: post_trial_gap }; Of course, this block also needs to be added to the experiment's timeline: timeline.push(test_block);","title":"Part 4: Creating an experimental block"},{"location":"flanker/#the-code-so-far_1","text":"<!doctype html> <html> <head> <title>Flanker Task</title> <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js\"></script> <script src=\"jspsych.js\"></script> <script src=\"plugins/jspsych-text.js\"></script> <script src=\"plugins/jspsych-single-stim.js\"></script> <link href=\"css/jspsych.css\" rel=\"stylesheet\" type=\"text/css\"> </head> <body> </body> <script> /*set up welcome block*/ var welcome = { type: \"text\", text: \"<p style='margin:20%'>Welcome to the experiment. Press any key to begin.</p>\" }; /*set up instructions block*/ var instructions = { type: \"text\", text: \"<p style='margin-top:20%; margin-right:10%'>In this task you are required to respond to \" + \"stimuli displayed on the screen. In the following, you will see five arrows. Your task \" + \"is to decide as quickly as possible if the arrow in the middle is pointing in the same \" + \"direction as the others or not. If this is the case ('<strong><<<<<</strong>' or \" + \"'<strong>>>>>></strong>'), please press the left arrow button on the keyboard. If the \" + \"middle arrow is pointing in the opposite direction ('<strong><<><<</strong>' or \" + \"'<strong>>><>></strong>'), please press the right arrow button on the keyboard. You can \" + \"start the experiment by pressing ENTER.</p>\", timing_post_trial: 3000 }; /*defining stimuli*/ var test_stimuli = [ { stimulus: \"img/con1.png\", data: { phase: 'congruent'} }, { stimulus: \"img/con2.png\", data: { phase: 'congruent'} }, { stimulus: \"img/inc1.png\", data: { phase: 'incongruent'} }, { stimulus: \"img/inc2.png\", data: { phase: 'incongruent'} } ]; /*randomising stimuli*/ var all_trials = jsPsych.randomization.repeat(test_stimuli, 25); /*creating random ISI*/ var post_trial_gap = function() { return Math.floor(Math.random() * 1500) + 500; }; /*defining experimental block*/ var test_block = { type: 'single-stim', choices: [37, 39], timing_response: 1500, timeline: all_trials, timing_post_trial: post_trial_gap }; /*set up experiment structure*/ var timeline = []; timeline.push(welcome); timeline.push(instructions); timeline.push(test_block); /*start experiment*/ jsPsych.init({ timeline: timeline, on_finish: function() { jsPsych.data.displayData(); } ); </script> </html>","title":"The code so far:"},{"location":"flanker/#part-5-presenting-feedback-to-the-participants","text":"Running the experiment now will provide you with a welcome message, instructions, and 100 trials. We would like to give the participants feedback about their performance at the end of the experiment. (Note: This was already part of the basic tutorial ). We first need to modify our test_block a bit to define what a correct trial is. var test_block = { type: 'single-stim', choices: [37, 39], timing_response: 1500, on_finish: function(data){ var correct = false; if(data.phase == 'congruent' && data.key_press == '37' && data.rt > -1){ correct = true; } else if(data.phase == 'incongruent' && data.key_press == '39' && data.rt > -1){ correct = true; } jsPsych.data.addDataToLastTrial({correct: correct}); }, timeline: all_trials, timing_post_trial: post_trial_gap }; Essentially, what we're doing here is saying that whenever a congruent stimulus was displayed and the left arrow key was pressed or an incongruent stimulus was displayed and the right arrow key was pressed (and neither of those reactions was later than the 1500 ms limit we defined earlier), the program returns the information that these are correct trials. We want to display both the percentage of correct responses as well as the mean reaction time. For this, we need to add the following function to the code: function getSubjectData() { var trials = jsPsych.data.getTrialsOfType('single-stim'); var sum_rt = 0; var correct_trial_count = 0; var correct_rt_count = 0; for (var i = 0; i < trials.length; i++) { if (trials[i].correct == true) { correct_trial_count++; if(trials[i].rt > -1){ sum_rt += trials[i].rt; correct_rt_count++; } } } return { rt: Math.floor(sum_rt / correct_rt_count), accuracy: Math.floor(correct_trial_count / trials.length * 100) } }; Finally, we add a debriefing block which is displayed after the last trial of the experiment. Don't forget to add this block to the timeline as well! var debrief_block = { type: \"text\", text: function() { var subject_data = getSubjectData(); return \"<p style='margin:20%'>You responded correctly on \"+subject_data.accuracy+\"% of the trials. \" + \"Your average response time was <strong>\" + subject_data.rt + \"ms</strong>. Press any key to complete the \"+ \"experiment. Thank you!</p>\"; } };","title":"Part 5: Presenting feedback to the participants"},{"location":"flanker/#the-final-code","text":"<!doctype html> <html> <head> <title>Flanker Task</title> <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js\"></script> <script src=\"jspsych.js\"></script> <script src=\"plugins/jspsych-text.js\"></script> <script src=\"plugins/jspsych-single-stim.js\"></script> <link href=\"css/jspsych.css\" rel=\"stylesheet\" type=\"text/css\"> </head> <body> </body> <script> /*set up welcome block*/ var welcome = { type: \"text\", text: \"<p style='margin:20%'>Welcome to the experiment. Press any key to begin.</p>\" }; /*set up instructions block*/ var instructions = { type: \"text\", text: \"<p style='margin-top:20%; margin-right:10%'>In this task you are required to respond to \" + \"stimuli displayed on the screen. In the following, you will see five arrows. Your task \" + \"is to decide as quickly as possible if the arrow in the middle is pointing in the same \" + \"direction as the others or not. If this is the case ('<strong><<<<<</strong>' or \" + \"'<strong>>>>>></strong>'), please press the left arrow button on the keyboard. If the \" + \"middle arrow is pointing in the opposite direction ('<strong><<><<</strong>' or \" + \"'<strong>>><>></strong>'), please press the right arrow button on the keyboard. You can \" + \"start the experiment by pressing ENTER.</p>\", timing_post_trial: 3000 }; /*defining stimuli*/ var test_stimuli = [ { stimulus: \"img/con1.png\", data: { phase: 'congruent'} }, { stimulus: \"img/con2.png\", data: { phase: 'congruent'} }, { stimulus: \"img/inc1.png\", data: { phase: 'incongruent'} }, { stimulus: \"img/inc2.png\", data: { phase: 'incongruent'} } ]; /*randomising stimuli*/ var all_trials = jsPsych.randomization.repeat(test_stimuli, 25); /*creating random ISI*/ var post_trial_gap = function() { return Math.floor(Math.random() * 1500) + 500; }; /*defining experimental block*/ var test_block = { type: 'single-stim', choices: [37, 39], timing_response: 1500, on_finish: function(data){ var correct = false; if(data.phase == 'congruent' && data.key_press == '37' && data.rt > -1){ correct = true; } else if(data.phase == 'incongruent' && data.key_press == '39' && data.rt > -1){ correct = true; } jsPsych.data.addDataToLastTrial({correct: correct}); }, timeline: all_trials, timing_post_trial: post_trial_gap }; /*function for getting mean RTs and error rates*/ function getSubjectData() { var trials = jsPsych.data.getTrialsOfType('single-stim'); var sum_rt = 0; var correct_trial_count = 0; var correct_rt_count = 0; for (var i = 0; i < trials.length; i++) { if (trials[i].correct == true) { correct_trial_count++; if(trials[i].rt > -1){ sum_rt += trials[i].rt; correct_rt_count++; } } } return { rt: Math.floor(sum_rt / correct_rt_count), accuracy: Math.floor(correct_trial_count / trials.length * 100) } }; /*defining debriefing block*/ var debrief_block = { type: \"text\", text: function() { var subject_data = getSubjectData(); return \"<p style='margin:20%'>You responded correctly on \"+subject_data.accuracy+\"% of the trials. \" + \"Your average response time was <strong>\" + subject_data.rt + \"ms</strong>. Press any key to complete the \"+ \"experiment. Thank you!</p>\"; } }; /*set up experiment structure*/ var timeline = []; timeline.push(welcome); timeline.push(instructions); timeline.push(test_block); timeline.push(debrief_block); /*start experiment*/ jsPsych.init({ timeline: timeline, on_finish: function() { jsPsych.data.displayData(); } ); </script> </html>","title":"The final code:"},{"location":"github-pages/","text":"Making jsPsych files loadable in Qualtrics To use jsPsych in Qualtrics, the jsPsych javascript and CSS files need to be online and loadable from Qualtrics. GitHub Pages allows you to do so with only three steps (if you have a GitHub account). I will use these GitHub-hosted scripts in the following tutorials, so please complete this step. Step 0. Create a GitHub account Go to the GitHub site and create your account. Step 1. Fork the jsPsych repository Go to the jsPsych repository and click the Fork button to copy the repo to your account. Step 2. Click the Settings button The whole jsPsych repository has been copied to your account, which should be accessible at https://github.com/<your-github-username>/jsPsych/ . For example, https://github.com/kywch/jsPsych/ . Go to your copy of the jsPsych repository and click the Settings button on the home page. Step 3. Enable GitHub Pages for the jsPsych repository Scroll down and find the GitHub Pages section. Select the Source to be the master branch . Within a few minutes, a website will be available at https://<your-github-username>.github.io/jsPsych/ . For example, https://kywch.github.io/jsPsych/ . And, you are done. You can check with your browser by directly going to the jspsych.js , jspsych.css , and jspsych-html-keyboard-response.js . jspsych.js should be available at https://<your-github-username>.github.io/jsPsych/jspsych.js , like https://kywch.github.io/jsPsych/jspsych.js . jspsych.css should be available at https://<your-github-username>.github.io/jsPsych/css/jspsych.css , like https://kywch.github.io/jsPsych/css/jspsych.css . jspsych-html-keyboard-response.js should be available at https://<your-github-username>.github.io/jsPsych/plugins/jspsych-html-keyboard-response.js , like https://kywch.github.io/jsPsych/plugins/jspsych-html-keyboard-response.js . BUT WAIT! This is not the only way. I will explain another way in the Reaction-time Task tutorial.","title":"Hosting jsPsych"},{"location":"github-pages/#making-jspsych-files-loadable-in-qualtrics","text":"To use jsPsych in Qualtrics, the jsPsych javascript and CSS files need to be online and loadable from Qualtrics. GitHub Pages allows you to do so with only three steps (if you have a GitHub account). I will use these GitHub-hosted scripts in the following tutorials, so please complete this step.","title":"Making jsPsych files loadable in Qualtrics"},{"location":"github-pages/#step-0-create-a-github-account","text":"Go to the GitHub site and create your account.","title":"Step 0. Create a GitHub account"},{"location":"github-pages/#step-1-fork-the-jspsych-repository","text":"Go to the jsPsych repository and click the Fork button to copy the repo to your account.","title":"Step 1. Fork the jsPsych repository"},{"location":"github-pages/#step-2-click-the-settings-button","text":"The whole jsPsych repository has been copied to your account, which should be accessible at https://github.com/<your-github-username>/jsPsych/ . For example, https://github.com/kywch/jsPsych/ . Go to your copy of the jsPsych repository and click the Settings button on the home page.","title":"Step 2. Click the Settings button"},{"location":"github-pages/#step-3-enable-github-pages-for-the-jspsych-repository","text":"Scroll down and find the GitHub Pages section. Select the Source to be the master branch . Within a few minutes, a website will be available at https://<your-github-username>.github.io/jsPsych/ . For example, https://kywch.github.io/jsPsych/ .","title":"Step 3. Enable GitHub Pages for the jsPsych repository"},{"location":"github-pages/#and-you-are-done","text":"You can check with your browser by directly going to the jspsych.js , jspsych.css , and jspsych-html-keyboard-response.js . jspsych.js should be available at https://<your-github-username>.github.io/jsPsych/jspsych.js , like https://kywch.github.io/jsPsych/jspsych.js . jspsych.css should be available at https://<your-github-username>.github.io/jsPsych/css/jspsych.css , like https://kywch.github.io/jsPsych/css/jspsych.css . jspsych-html-keyboard-response.js should be available at https://<your-github-username>.github.io/jsPsych/plugins/jspsych-html-keyboard-response.js , like https://kywch.github.io/jsPsych/plugins/jspsych-html-keyboard-response.js .","title":"And, you are done."},{"location":"github-pages/#but-wait-this-is-not-the-only-way","text":"I will explain another way in the Reaction-time Task tutorial.","title":"BUT WAIT! This is not the only way."},{"location":"hello-world/","text":"Embedding the jsPsych \"Hello world\" experiment into Qualtrics Let's start from the original jsPsych \"Hello world!\" example and embed it to qualtrics. To do so, you need to use the display_element option, which was briefly mentioned in the jsPsych tutorial . The start: experiment.html After completing the original jsPsych \"Hello world!\" example , your folder should look like this. When you open experiment.html using your programming-friendly text editor, such as Atom or VSCode , you should see the html code like below. <!DOCTYPE html> <html> <head> <title>My experiment</title> <script src=\"jspsych-6.0.5/jspsych.js\"></script> <script src=\"jspsych-6.0.5/plugins/jspsych-html-keyboard-response.js\"></script> <link href=\"jspsych-6.0.5/css/jspsych.css\" rel=\"stylesheet\" type=\"text/css\"></link> </head> <body></body> <script> var hello_trial = { type: 'html-keyboard-response', stimulus: 'Hello world!' } jsPsych.init({ timeline: [hello_trial] }) </script> </html> When you open experiment.html in a browser, you should see \"Hello world!\" printed on the screen, and if you press a key on the keyboard, the text should disappear (ending the trial). First transformation: experiment-with-display-element.html The experiment-with-display-element.html file in this repository contains three changes from the experiment.html . When you open experiment-with-display-element.html in a browser, you should see the same \"Hello world!\". Let's look at each change. Change 1: Using display_element By adding the display_element parameter in the jsPsych.init() like below, you can have additional control over the display element, which is important in embedding jsPsych into Qualtrics. In the below example, jsPsych will render the experiment in the ' ' called display_stage , which the current script does not have yet. So, let's add the display_stage . jsPsych.init({ timeline: [hello_trial], display_element: 'display_stage' }) Change 2: Adding display_stage CSS and Div The display_stage needs below CSS and HTML code after the <body> tag, which also include the display_stage_background . Both are necessary to function well. <style> #display_stage_background { width: 100vw; background-color: white; z-index: -1; } #display_stage { position: fixed; left: 1vw; top: 1vh; height: 98vh; width: 98vw; background-color: white; box-shadow: 1px 1px 1px #999; border-radius: 15px; z-index: 0; overflow-y: hidden; overflow-x: hidden; } </style> <div id='display_stage_background'></div> <div id='display_stage'></div> Change 3: Adding extra scripts for Qualtrics The below scripts are not necessary to run this hello-world experiment, but you need to copy-paste these in Qualtrics later. One critical point is that now we use the jsPsych stylesheet hosted in the GitHub Pages (explained in the Hosting jsPsych section) instead of the CSS file in your computer. This is important because Qualtrics can also access the GitHub-hosted files. <!-- Change 3: Adding extra scripts for Qualtrics --> <!-- COPY PASTE TO QUALTRICS FROM HERE --> <link href=\"https://kywch.github.io/jsPsych/css/jspsych.css\" rel=\"stylesheet\" type=\"text/css\"></link> <div> <span style=\"font-size: 24px;\"> <br><br> If you are seeing this message for <span style=\"color: rgb(255, 0, 0);\"><b>more than 5 minutes</b></span>,<br> please screen-capture this screen and send the image to us. <br><br> <span style=\"font-size: 28px;\">We are very sorry for the inconvenience.</span> </span> </div> Putting it all together So the experiment-with-display-element.html code looks like this. <!DOCTYPE html> <html> <head> <title>My experiment</title> <script src=\"jspsych-6.1.0/jspsych.js\"></script> <script src=\"jspsych-6.1.0/plugins/jspsych-html-keyboard-response.js\"></script> <link href=\"jspsych-6.1.0/css/jspsych.css\" rel=\"stylesheet\" type=\"text/css\"></link> </head> <body> <!-- Change 3: Adding extra scripts for Qualtrics --> <!-- COPY PASTE TO QUALTRICS FROM HERE --> <link href=\"https://kywch.github.io/jsPsych/css/jspsych.css\" rel=\"stylesheet\" type=\"text/css\"></link> <div> <span style=\"font-size: 24px;\"> <br><br> If you are seeing this message for <span style=\"color: rgb(255, 0, 0);\"><b>more than 5 minutes</b></span>,<br> please screen-capture this screen and send the image to us. <br><br> <span style=\"font-size: 28px;\">We are very sorry for the inconvenience.</span> </span> </div> <!-- Change 2: Adding `display_stage` CSS and Div --> <style> #display_stage_background { width: 100vw; background-color: white; z-index: -1; } #display_stage { position: fixed; left: 1vw; top: 1vh; height: 98vh; width: 98vw; background-color: white; box-shadow: 1px 1px 1px #999; border-radius: 15px; z-index: 0; overflow-y: hidden; overflow-x: hidden; } </style> <!-- COPY PASTE UP TO QUALTRICS TO HERE --> <div id='display_stage_background'></div> <div id='display_stage'></div> </body> <script> var hello_trial = { type: 'html-keyboard-response', stimulus: 'Hello world!' } /* Change 1: Using `display_element` */ jsPsych.init({ timeline: [hello_trial], display_element: 'display_stage' }) </script> </html> Second transformation: qualtrics.js The qualtrics.js file in this repository contains several changes from experiment-with-display-element.html and can be put into Qualtrics. Let's look at each change. Change 1: The Question JavaScript skeleton You need to add your experiment codes to the skeleton provided by Qualtrics Question JavaScript Editor. For details, see the Add JavaScript help page . Qualtrics.SurveyEngine.addOnload(function() { /*Place your JavaScript here to run when the page loads*/ }); Qualtrics.SurveyEngine.addOnReady(function() { /*Place your JavaScript here to run when the page is fully displayed*/ }); Qualtrics.SurveyEngine.addOnUnload(function() { /*Place your JavaScript here to run when the page is unloaded*/ }); Change 2: Hide the Next button The below javascript code hides the Next button and puts the javascript code in the driving seat. // Retrieve Qualtrics object and save in qthis var qthis = this; // Hide buttons qthis.hideNextButton(); Change 3: Define and load required resources The below javascript defines where the necessary files are so that Qualtrics can load these. After Making jsPsych files loadable in Qualtrics , you should be able to put your github page url at jslib_url . var jslib_url = \"https://kywch.github.io/jsPsych/\"; // \"https://<your-github-username>.github.io/jsPsych/\" // the below urls must be accessible with your browser // for example, https://kywch.github.io/jsPsych/jspsych.js var requiredResources = [ jslib_url + \"jspsych.js\", jslib_url + \"plugins/jspsych-html-keyboard-response.js\" ]; function loadScript(idx) { console.log(\"Loading \", requiredResources[idx]); jQuery.getScript(requiredResources[idx], function () { if ((idx + 1) < requiredResources.length) { loadScript(idx + 1); } else { initExp(); } }); } if (window.Qualtrics && (!window.frameElement || window.frameElement.id !== \"mobile-preview-view\")) { loadScript(0); } Change 4: Append the display_stage Div using jQuery In Qualtrics, jQuery (loaded by default) is used to append the display_stage_background and display_stage Divs. The CSS for these elements will be added directly to Question HTML later in this tutorial. // jQuery is loaded in Qualtrics by default jQuery(\"<div id = 'display_stage_background'></div>\").appendTo('body'); jQuery(\"<div id = 'display_stage'></div>\").appendTo('body'); Change 5: Wrap jsPsych.init() in a function The main experiment codes are wrapped in the initExp function to make sure it runs after all the necessary library and plugin files are loaded (as defined in the loadScript function above). function initExp() { var hello_trial = { type: 'html-keyboard-response', stimulus: 'Hello world!' } jsPsych.init({ timeline: [hello_trial], display_element: 'display_stage', }); } Change 6: Add the clean up and continue functions When the jsPsych ends, display_stage and display_stage_background should be removed. Then, execulte the clickNextButton to simulate clicking the Next button and proceed to the next question. on_finish: function (data) { // clear the stage jQuery('display_stage').remove(); jQuery('display_stage_background').remove(); // simulate click on Qualtrics \"next\" button, making use of the Qualtrics JS API qthis.clickNextButton(); } Putting it all together So the qualtrics.js code looks like this. Qualtrics.SurveyEngine.addOnload(function () { /*Place your JavaScript here to run when the page loads*/ /* Change 2: Hide the Next button */ // Retrieve Qualtrics object and save in qthis var qthis = this; // Hide buttons qthis.hideNextButton(); /* Change 3: Define and load required resources */ var jslib_url = \"https://kywch.github.io/jsPsych/\"; // the below urls must be accessible with your browser // for example, https://kywch.github.io/jsPsych/jspsych.js var requiredResources = [ jslib_url + \"jspsych.js\", jslib_url + \"plugins/jspsych-html-keyboard-response.js\" ]; function loadScript(idx) { console.log(\"Loading \", requiredResources[idx]); jQuery.getScript(requiredResources[idx], function () { if ((idx + 1) < requiredResources.length) { loadScript(idx + 1); } else { initExp(); } }); } if (window.Qualtrics && (!window.frameElement || window.frameElement.id !== \"mobile-preview-view\")) { loadScript(0); } /* Change 4: Append the display_stage Div using jQuery */ // jQuery is loaded in Qualtrics by default jQuery(\"<div id = 'display_stage_background'></div>\").appendTo('body'); jQuery(\"<div id = 'display_stage'></div>\").appendTo('body'); /* Change 5: Wrap jsPsych.init() in a function */ function initExp() { var hello_trial = { type: 'html-keyboard-response', stimulus: 'Hello world!' } jsPsych.init({ timeline: [hello_trial], display_element: 'display_stage', /* Change 6: Add the clean up and continue functions.*/ on_finish: function (data) { // clear the stage jQuery('display_stage').remove(); jQuery('display_stage_background').remove(); // simulate click on Qualtrics \"next\" button, making use of the Qualtrics JS API qthis.clickNextButton(); } }); } }); Qualtrics.SurveyEngine.addOnReady(function () { /*Place your JavaScript here to run when the page is fully displayed*/ }); Qualtrics.SurveyEngine.addOnUnload(function () { /*Place your JavaScript here to run when the page is unloaded*/ }); Finally, embedding jsPsych in Qualtrics Let's log in to Qualtrics and take a look at each step. Step 1. Create a new Qualtrics project and then a new question This tutorial assumes that readers are much more familiar with Qualtrics. For Qualtrics tutorial, there are other excellent tutorials available like this Qualtrics User Guide . To continue, please create a new Qualtrics project. Then, create a new question and (1) change its format to Text/Graphic . Step 2. Open the Question JavaScript editor and copy paste the whole qualtrics.js Keep going in the above picture. (2) Click the gear to open the dropdown menu, and then (3) find and click Add JavaScript . Step 3. Open the Question HTML editor and copy paste the portion of experiment-with-display-element.html The Change 3 section of the experiment-with-display-element.html file contains the link to jsPsych CSS file, the inline styles for display_stage Div, and the error message to be displayed when things go wrong. To open the HTML editor, click the HTML View button. Then, copy paste the portion of experiment-with-display-element.html to the HTML editor, starting from <!-- COPY PASTE TO QUALTRICS FROM HERE --> to <!-- COPY PASTE TO QUALTRICS UP TO HERE --> . After copy pasting, you should see something like below. Step 4. Publish and test! Publish the survey by following this Qualtrics tutorial . Then, an anonymous Qualtrics link is generated. If you click this link, you should be able to see \"Hello World!\" in Qualtrics. For example, here is a just another Hello-World Qualtrics survey .","title":"Hello world!"},{"location":"hello-world/#embedding-the-jspsych-hello-world-experiment-into-qualtrics","text":"Let's start from the original jsPsych \"Hello world!\" example and embed it to qualtrics. To do so, you need to use the display_element option, which was briefly mentioned in the jsPsych tutorial .","title":"Embedding the jsPsych \"Hello world\" experiment into Qualtrics"},{"location":"hello-world/#the-start-experimenthtml","text":"After completing the original jsPsych \"Hello world!\" example , your folder should look like this. When you open experiment.html using your programming-friendly text editor, such as Atom or VSCode , you should see the html code like below. <!DOCTYPE html> <html> <head> <title>My experiment</title> <script src=\"jspsych-6.0.5/jspsych.js\"></script> <script src=\"jspsych-6.0.5/plugins/jspsych-html-keyboard-response.js\"></script> <link href=\"jspsych-6.0.5/css/jspsych.css\" rel=\"stylesheet\" type=\"text/css\"></link> </head> <body></body> <script> var hello_trial = { type: 'html-keyboard-response', stimulus: 'Hello world!' } jsPsych.init({ timeline: [hello_trial] }) </script> </html> When you open experiment.html in a browser, you should see \"Hello world!\" printed on the screen, and if you press a key on the keyboard, the text should disappear (ending the trial).","title":"The start: experiment.html"},{"location":"hello-world/#first-transformation-experiment-with-display-elementhtml","text":"The experiment-with-display-element.html file in this repository contains three changes from the experiment.html . When you open experiment-with-display-element.html in a browser, you should see the same \"Hello world!\". Let's look at each change.","title":"First transformation: experiment-with-display-element.html"},{"location":"hello-world/#change-1-using-display_element","text":"By adding the display_element parameter in the jsPsych.init() like below, you can have additional control over the display element, which is important in embedding jsPsych into Qualtrics. In the below example, jsPsych will render the experiment in the ' ' called display_stage , which the current script does not have yet. So, let's add the display_stage . jsPsych.init({ timeline: [hello_trial], display_element: 'display_stage' })","title":"Change 1: Using display_element"},{"location":"hello-world/#change-2-adding-display_stage-css-and-div","text":"The display_stage needs below CSS and HTML code after the <body> tag, which also include the display_stage_background . Both are necessary to function well. <style> #display_stage_background { width: 100vw; background-color: white; z-index: -1; } #display_stage { position: fixed; left: 1vw; top: 1vh; height: 98vh; width: 98vw; background-color: white; box-shadow: 1px 1px 1px #999; border-radius: 15px; z-index: 0; overflow-y: hidden; overflow-x: hidden; } </style> <div id='display_stage_background'></div> <div id='display_stage'></div>","title":"Change 2: Adding display_stage CSS and Div"},{"location":"hello-world/#change-3-adding-extra-scripts-for-qualtrics","text":"The below scripts are not necessary to run this hello-world experiment, but you need to copy-paste these in Qualtrics later. One critical point is that now we use the jsPsych stylesheet hosted in the GitHub Pages (explained in the Hosting jsPsych section) instead of the CSS file in your computer. This is important because Qualtrics can also access the GitHub-hosted files. <!-- Change 3: Adding extra scripts for Qualtrics --> <!-- COPY PASTE TO QUALTRICS FROM HERE --> <link href=\"https://kywch.github.io/jsPsych/css/jspsych.css\" rel=\"stylesheet\" type=\"text/css\"></link> <div> <span style=\"font-size: 24px;\"> <br><br> If you are seeing this message for <span style=\"color: rgb(255, 0, 0);\"><b>more than 5 minutes</b></span>,<br> please screen-capture this screen and send the image to us. <br><br> <span style=\"font-size: 28px;\">We are very sorry for the inconvenience.</span> </span> </div>","title":"Change 3: Adding extra scripts for Qualtrics"},{"location":"hello-world/#putting-it-all-together","text":"So the experiment-with-display-element.html code looks like this. <!DOCTYPE html> <html> <head> <title>My experiment</title> <script src=\"jspsych-6.1.0/jspsych.js\"></script> <script src=\"jspsych-6.1.0/plugins/jspsych-html-keyboard-response.js\"></script> <link href=\"jspsych-6.1.0/css/jspsych.css\" rel=\"stylesheet\" type=\"text/css\"></link> </head> <body> <!-- Change 3: Adding extra scripts for Qualtrics --> <!-- COPY PASTE TO QUALTRICS FROM HERE --> <link href=\"https://kywch.github.io/jsPsych/css/jspsych.css\" rel=\"stylesheet\" type=\"text/css\"></link> <div> <span style=\"font-size: 24px;\"> <br><br> If you are seeing this message for <span style=\"color: rgb(255, 0, 0);\"><b>more than 5 minutes</b></span>,<br> please screen-capture this screen and send the image to us. <br><br> <span style=\"font-size: 28px;\">We are very sorry for the inconvenience.</span> </span> </div> <!-- Change 2: Adding `display_stage` CSS and Div --> <style> #display_stage_background { width: 100vw; background-color: white; z-index: -1; } #display_stage { position: fixed; left: 1vw; top: 1vh; height: 98vh; width: 98vw; background-color: white; box-shadow: 1px 1px 1px #999; border-radius: 15px; z-index: 0; overflow-y: hidden; overflow-x: hidden; } </style> <!-- COPY PASTE UP TO QUALTRICS TO HERE --> <div id='display_stage_background'></div> <div id='display_stage'></div> </body> <script> var hello_trial = { type: 'html-keyboard-response', stimulus: 'Hello world!' } /* Change 1: Using `display_element` */ jsPsych.init({ timeline: [hello_trial], display_element: 'display_stage' }) </script> </html>","title":"Putting it all together"},{"location":"hello-world/#second-transformation-qualtricsjs","text":"The qualtrics.js file in this repository contains several changes from experiment-with-display-element.html and can be put into Qualtrics. Let's look at each change.","title":"Second transformation: qualtrics.js"},{"location":"hello-world/#change-1-the-question-javascript-skeleton","text":"You need to add your experiment codes to the skeleton provided by Qualtrics Question JavaScript Editor. For details, see the Add JavaScript help page . Qualtrics.SurveyEngine.addOnload(function() { /*Place your JavaScript here to run when the page loads*/ }); Qualtrics.SurveyEngine.addOnReady(function() { /*Place your JavaScript here to run when the page is fully displayed*/ }); Qualtrics.SurveyEngine.addOnUnload(function() { /*Place your JavaScript here to run when the page is unloaded*/ });","title":"Change 1: The Question JavaScript skeleton"},{"location":"hello-world/#change-2-hide-the-next-button","text":"The below javascript code hides the Next button and puts the javascript code in the driving seat. // Retrieve Qualtrics object and save in qthis var qthis = this; // Hide buttons qthis.hideNextButton();","title":"Change 2: Hide the Next button"},{"location":"hello-world/#change-3-define-and-load-required-resources","text":"The below javascript defines where the necessary files are so that Qualtrics can load these. After Making jsPsych files loadable in Qualtrics , you should be able to put your github page url at jslib_url . var jslib_url = \"https://kywch.github.io/jsPsych/\"; // \"https://<your-github-username>.github.io/jsPsych/\" // the below urls must be accessible with your browser // for example, https://kywch.github.io/jsPsych/jspsych.js var requiredResources = [ jslib_url + \"jspsych.js\", jslib_url + \"plugins/jspsych-html-keyboard-response.js\" ]; function loadScript(idx) { console.log(\"Loading \", requiredResources[idx]); jQuery.getScript(requiredResources[idx], function () { if ((idx + 1) < requiredResources.length) { loadScript(idx + 1); } else { initExp(); } }); } if (window.Qualtrics && (!window.frameElement || window.frameElement.id !== \"mobile-preview-view\")) { loadScript(0); }","title":"Change 3: Define and load required resources"},{"location":"hello-world/#change-4-append-the-display_stage-div-using-jquery","text":"In Qualtrics, jQuery (loaded by default) is used to append the display_stage_background and display_stage Divs. The CSS for these elements will be added directly to Question HTML later in this tutorial. // jQuery is loaded in Qualtrics by default jQuery(\"<div id = 'display_stage_background'></div>\").appendTo('body'); jQuery(\"<div id = 'display_stage'></div>\").appendTo('body');","title":"Change 4: Append the display_stage Div using jQuery"},{"location":"hello-world/#change-5-wrap-jspsychinit-in-a-function","text":"The main experiment codes are wrapped in the initExp function to make sure it runs after all the necessary library and plugin files are loaded (as defined in the loadScript function above). function initExp() { var hello_trial = { type: 'html-keyboard-response', stimulus: 'Hello world!' } jsPsych.init({ timeline: [hello_trial], display_element: 'display_stage', }); }","title":"Change 5: Wrap jsPsych.init() in a function"},{"location":"hello-world/#change-6-add-the-clean-up-and-continue-functions","text":"When the jsPsych ends, display_stage and display_stage_background should be removed. Then, execulte the clickNextButton to simulate clicking the Next button and proceed to the next question. on_finish: function (data) { // clear the stage jQuery('display_stage').remove(); jQuery('display_stage_background').remove(); // simulate click on Qualtrics \"next\" button, making use of the Qualtrics JS API qthis.clickNextButton(); }","title":"Change 6: Add the clean up and continue functions"},{"location":"hello-world/#putting-it-all-together_1","text":"So the qualtrics.js code looks like this. Qualtrics.SurveyEngine.addOnload(function () { /*Place your JavaScript here to run when the page loads*/ /* Change 2: Hide the Next button */ // Retrieve Qualtrics object and save in qthis var qthis = this; // Hide buttons qthis.hideNextButton(); /* Change 3: Define and load required resources */ var jslib_url = \"https://kywch.github.io/jsPsych/\"; // the below urls must be accessible with your browser // for example, https://kywch.github.io/jsPsych/jspsych.js var requiredResources = [ jslib_url + \"jspsych.js\", jslib_url + \"plugins/jspsych-html-keyboard-response.js\" ]; function loadScript(idx) { console.log(\"Loading \", requiredResources[idx]); jQuery.getScript(requiredResources[idx], function () { if ((idx + 1) < requiredResources.length) { loadScript(idx + 1); } else { initExp(); } }); } if (window.Qualtrics && (!window.frameElement || window.frameElement.id !== \"mobile-preview-view\")) { loadScript(0); } /* Change 4: Append the display_stage Div using jQuery */ // jQuery is loaded in Qualtrics by default jQuery(\"<div id = 'display_stage_background'></div>\").appendTo('body'); jQuery(\"<div id = 'display_stage'></div>\").appendTo('body'); /* Change 5: Wrap jsPsych.init() in a function */ function initExp() { var hello_trial = { type: 'html-keyboard-response', stimulus: 'Hello world!' } jsPsych.init({ timeline: [hello_trial], display_element: 'display_stage', /* Change 6: Add the clean up and continue functions.*/ on_finish: function (data) { // clear the stage jQuery('display_stage').remove(); jQuery('display_stage_background').remove(); // simulate click on Qualtrics \"next\" button, making use of the Qualtrics JS API qthis.clickNextButton(); } }); } }); Qualtrics.SurveyEngine.addOnReady(function () { /*Place your JavaScript here to run when the page is fully displayed*/ }); Qualtrics.SurveyEngine.addOnUnload(function () { /*Place your JavaScript here to run when the page is unloaded*/ });","title":"Putting it all together"},{"location":"hello-world/#finally-embedding-jspsych-in-qualtrics","text":"Let's log in to Qualtrics and take a look at each step.","title":"Finally, embedding jsPsych in Qualtrics"},{"location":"hello-world/#step-1-create-a-new-qualtrics-project-and-then-a-new-question","text":"This tutorial assumes that readers are much more familiar with Qualtrics. For Qualtrics tutorial, there are other excellent tutorials available like this Qualtrics User Guide . To continue, please create a new Qualtrics project. Then, create a new question and (1) change its format to Text/Graphic .","title":"Step 1. Create a new Qualtrics project and then a new question"},{"location":"hello-world/#step-2-open-the-question-javascript-editor-and-copy-paste-the-whole-qualtricsjs","text":"Keep going in the above picture. (2) Click the gear to open the dropdown menu, and then (3) find and click Add JavaScript .","title":"Step 2. Open the Question JavaScript editor and copy paste the whole qualtrics.js"},{"location":"hello-world/#step-3-open-the-question-html-editor-and-copy-paste-the-portion-of-experiment-with-display-elementhtml","text":"The Change 3 section of the experiment-with-display-element.html file contains the link to jsPsych CSS file, the inline styles for display_stage Div, and the error message to be displayed when things go wrong. To open the HTML editor, click the HTML View button. Then, copy paste the portion of experiment-with-display-element.html to the HTML editor, starting from <!-- COPY PASTE TO QUALTRICS FROM HERE --> to <!-- COPY PASTE TO QUALTRICS UP TO HERE --> . After copy pasting, you should see something like below.","title":"Step 3. Open the Question HTML editor and copy paste the portion of experiment-with-display-element.html"},{"location":"hello-world/#step-4-publish-and-test","text":"Publish the survey by following this Qualtrics tutorial . Then, an anonymous Qualtrics link is generated. If you click this link, you should be able to see \"Hello World!\" in Qualtrics. For example, here is a just another Hello-World Qualtrics survey .","title":"Step 4. Publish and test!"},{"location":"n-back/","text":"N-Back Tutorial This tutorial covers creating an n-back task using timeline variables and dynamic parameters. The techniques covered here are probably useful in circumstances where you want to generate a sequence of trials that have some dependencies (like the current trial must sometimes be the same as the trial two items ago) and don't want to manually code a fixed sequence of items. Video Link Watch the tutorial on YouTube Experiment link Try the completed experiment Full experiment The video tutorial walks through setting up the n-back task but doesn't go through setting up instructions or showing the participant their data at the end. The full-experiment.html code adds both of these features. You can try the full experiment here .","title":"N-Back Tutorial"},{"location":"n-back/#n-back-tutorial","text":"This tutorial covers creating an n-back task using timeline variables and dynamic parameters. The techniques covered here are probably useful in circumstances where you want to generate a sequence of trials that have some dependencies (like the current trial must sometimes be the same as the trial two items ago) and don't want to manually code a fixed sequence of items.","title":"N-Back Tutorial"},{"location":"n-back/#video-link","text":"Watch the tutorial on YouTube","title":"Video Link"},{"location":"n-back/#experiment-link","text":"Try the completed experiment","title":"Experiment link"},{"location":"n-back/#full-experiment","text":"The video tutorial walks through setting up the n-back task but doesn't go through setting up instructions or showing the participant their data at the end. The full-experiment.html code adds both of these features. You can try the full experiment here .","title":"Full experiment"},{"location":"rt-task/","text":"Embedding the jsPsych Simple Reaction Time Task into Qualtrics Let's start from the original jsPsych Simple Reaction Time Task and embed it to qualtrics. The start: demo-simple-rt-task.html The experiment code, demo-simple-rt-task.html is included in the examples folder in the jsPsych repository . Let's make the code work in a separate folder like the hello-world example . To do so, you need to change the url of jsPsych scripts, stylesheet, and stimuli of the experiment code. In this tutorial, we will change those twice to make the rt-task (1) run on a new folder and (2) use the GitHub-hosted resources. First, let's make it run locally. To do so, The jsPsych library, plugins, and stylesheet come from the local folder. As you can see, the demo-simple-rt-task.html in this repository looks at the local jspsych-6.1.0 folder for these files. <script src=\"jspsych-6.1.0/jspsych.js\"></script> <script src=\"jspsych-6.1.0/plugins/jspsych-html-keyboard-response.js\"></script> <script src=\"jspsych-6.1.0/plugins/jspsych-image-keyboard-response.js\"></script> <link rel=\"stylesheet\" href=\"jspsych-6.1.0/css/jspsych.css\"></link> The experiment also needs stimuli images (see the original jsPsych tutorial ). So, you need to create a folder called img in the experiment folder and copy blue.png and orange.png into the img folder. Your folder should look like this. Hosting this task in GitHub To use jsPsych in Qualtrics, the jsPsych javascript and CSS files need to be online and loadable from Qualtrics. Creating a GitHub repository for your experiment helps you do so in simple steps. Step 0. Create a GitHub account Go to the GitHub site and create your account. Step 1. Create a new GitHub repository Create a repository for your experiment by following this Create a repo guide . Step 2. Add experiment files to the repository Upload your experiment files to the repository. The easy way is to drag and drop your files like this Adding a file to a repository guide . Do NOT forget to click the Commit changes button. My Simple-RT-Task repository looks like this: https://github.com/kywch/Simple-RT-Task/ . Step 3. Click the Settings button Click the Settings button on the repository home page. Step 4. Enable GitHub Pages for your experiment Scroll down and find the GitHub Pages section. Select the Source to be the master branch . Within a few minutes, a website will be available at https://<your-github-username>.github.io/<your-experiment-name>/ . How do you know the page is up and running? Well, let's try to access the jspsych.css file by going into https://<your-github-username>.github.io/<your-experiment-name>/jspsych-6.1.0/css/jspsych.css . For example, https://kywch.github.io/Simple-RT-Task/jspsych-6.1.0/css/jspsych.css . WAIT, did you know? Did you know that you also accidentally made your task online that anyone with the Internet can try your task? Open your browser and go to https://<your-github-username>.github.io/<your-experiment-name>/demo-simple-rt-task.html , or try mine: https://kywch.github.io/Simple-RT-Task/demo-simple-rt-task.html . If your expeirment doesnt' work, (this may sound silly but worked for me) try to turn off and on the GitHub Pages multiple times (i.e., switching the Source to be None and master branch ). First transformation: demo-simple-rt-task-transformed.html and rt-task_main.js I prefer to separate out the experiment-related code from the operation-related code, following the Experiment Factory style. If you haven't, please visit the Experiment Factory library , which contain a ton of experiments with running demos and their code. In the demo-simple-rt-task.html , constructing the timeline can be considered to be experiment-related, and the remaining parts that also appear in the Hello-World example , such as loading jspsych.js and jsPsych.init() can be considered to be operation-related. Here, I am separating the experiment-related code and the operation-related code and putting the code into rt-task_main.js and demo-simple-rt-task-transformed.html , respectively, by following steps: Step 1. Copy demo-simple-rt-task.html to demo-simple-rt-task-transformed.html Step 2. Create a new file rt-task_main.js And open rt-task_main.js in a new editor window. Step 3. Cut and paste the experiment-related code Open demo-simple-rt-task-transformed.html . You should have both rt-task_main.js and demo-simple-rt-task-transformed.html opened. Select the code from the /* create timeline */ line to the timeline.push(debrief_block); line, cut the selection , and paste it to rt-task_main.js . REPEAT . The code is being cut-and-pasted (NOT copy-pasted). /* create timeline */ var timeline = []; /* define welcome message trial */ var welcome_block = { type: \"html-keyboard-response\", stimulus: \"Welcome to the experiment. Press any key to begin.\" }; timeline.push(welcome_block); /* define instructions trial */ var instructions = { type: \"html-keyboard-response\", stimulus: \"<p>In this experiment, a circle will appear in the center \" + \"of the screen.</p><p>If the circle is <strong>blue</strong>, \" + \"press the letter F on the keyboard as fast as you can.</p>\" + \"<p>If the circle is <strong>orange</strong>, press the letter J \" + \"as fast as you can.</p>\" + \"<div style='width: 700px;'>\"+ \"<div style='float: left;'><img src='img/blue.png'></img>\" + \"<p class='small'><strong>Press the F key</strong></p></div>\" + \"<div class='float: right;'><img src='img/orange.png'></img>\" + \"<p class='small'><strong>Press the J key</strong></p></div>\" + \"</div>\"+ \"<p>Press any key to begin.</p>\", post_trial_gap: 2000 }; timeline.push(instructions); /* test trials */ var test_stimuli = [ { stimulus: \"img/blue.png\", data: { test_part: 'test', correct_response: 'f' } }, { stimulus: \"img/orange.png\", data: { test_part: 'test', correct_response: 'j' } } ]; var fixation = { type: 'html-keyboard-response', stimulus: '<div style=\"font-size:60px;\">+</div>', choices: jsPsych.NO_KEYS, trial_duration: function(){ return jsPsych.randomization.sampleWithoutReplacement([250, 500, 750, 1000, 1250, 1500, 1750, 2000], 1)[0]; }, data: {test_part: 'fixation'} } var test = { type: \"image-keyboard-response\", stimulus: jsPsych.timelineVariable('stimulus'), choices: ['f', 'j'], data: jsPsych.timelineVariable('data'), on_finish: function(data){ data.correct = data.key_press == jsPsych.pluginAPI.convertKeyCharacterToKeyCode(data.correct_response); }, } var test_procedure = { timeline: [fixation, test], timeline_variables: test_stimuli, repetitions: 5, randomize_order: true } timeline.push(test_procedure); /* define debrief */ var debrief_block = { type: \"html-keyboard-response\", stimulus: function() { var trials = jsPsych.data.get().filter({test_part: 'test'}); var correct_trials = trials.filter({correct: true}); var accuracy = Math.round(correct_trials.count() / trials.count() * 100); var rt = Math.round(correct_trials.select('rt').mean()); return \"<p>You responded correctly on \"+accuracy+\"% of the trials.</p>\"+ \"<p>Your average response time was \"+rt+\"ms.</p>\"+ \"<p>Press any key to complete the experiment. Thank you!</p>\"; } }; timeline.push(debrief_block); Step 4. rt-task_main.js : Use the GitHub-hosted stimuli images The above code uses the stimuli images in the img folder placed with the experiment html. But since you also put these images in your GitHub repository and made these available through the Internet, you can also use these images. The img/blue.png is available at https://<your-github-username>.github.io/<your-experiment-name>/img/blue.png . For example, https://kywch.github.io/Simple-RT-Task/img/blue.png . And, the img/orange.png is available at https://<your-github-username>.github.io/<your-experiment-name>/img/orange.png . For example, https://kywch.github.io/Simple-RT-Task/img/orange.png . The rt-task_main.js in this tutorial has a few changes to use the GitHub-hosted images. Let's see these changes. Change 1: Adding the image hosting site The repo_site variable was added to locate the site that hosts stimuli images. You can easily use your repository by changing this line. // define the site that hosts stimuli images // usually https://<your-github-username>.github.io/<your-experiment-name>/ var repo_site = \"https://kywch.github.io/Simple-RT-Task/\"; Change 2: Adding repo_site in instructions The repo_site variable should be added to wherever img/blue.png and img/orange.png are used like the below. The find function really helps in doing so. var instructions = { type: \"html-keyboard-response\", stimulus: \"<p>In this experiment, a circle will appear in the center \" + \"of the screen.</p><p>If the circle is <strong>blue</strong>, \" + \"press the letter F on the keyboard as fast as you can.</p>\" + \"<p>If the circle is <strong>orange</strong>, press the letter J \" + \"as fast as you can.</p>\" + \"<div style='width: 700px;'>\" + \"<div style='float: left;'><img src='\" + repo_site + \"img/blue.png'></img>\" + // Change 2: Adding `repo_site` in `instructions` \"<p class='small'><strong>Press the F key</strong></p></div>\" + \"<div class='float: right;'><img src='\" + repo_site + \"img/orange.png'></img>\" + // Change 2: Adding `repo_site` in `instructions` \"<p class='small'><strong>Press the J key</strong></p></div>\" + \"</div>\" + \"<p>Press any key to begin.</p>\", post_trial_gap: 2000 }; Change 3: Adding repo_site in test_stimuli var test_stimuli = [{ stimulus: repo_site + \"img/blue.png\", // Change 3: Adding `repo_site` in `test_stimuli` data: { test_part: 'test', correct_response: 'f' } }, { stimulus: repo_site + \"img/orange.png\", // Change 3: Adding `repo_site` in `test_stimuli` data: { test_part: 'test', correct_response: 'j' } } ]; Step 5. demo-simple-rt-task-transformed.html : Import rt-task_main.js Cutting the experiment-related code makes the demo-simple-rt-task-transformed.html file much shorter. To make demo-simple-rt-task-transformed.html work, you need to load rt-task_main.js by using a <script> tag like the other jspsych plugin files (see the original jsPsych tutorial ). <!-- CHANGE: Loading the external main experiment script --> <script src=\"rt-task_main.js\"></script> After making these changes, don't forget to SAVE ! Does this work? Let's find out by opening demo-simple-rt-task-transformed.html in a browser. Step 6: Upload demo-simple-rt-task-transformed.html and rt-task_main.js to GitHub If this works, let's upload demo-simple-rt-task-transformed.html and rt-task_main.js to your GitHub repository so that your task also runs over the Internet. After uploading both scripts (and waiting for a few minutes), you should be able to access https://<your-github-username>.github.io/<your-experiment-name>/demo-simple-rt-task-transformed.html . For example, https://kywch.github.io/Simple-RT-Task/demo-simple-rt-task-transformed.html . If the above link works, then it also means that the experiment-related code, rt-task_main.js , is also available for Qualtrics to load. You can actually access it by going to https://<your-github-username>.github.io/<your-experiment-name>/rt-task_main.js . For example, https://kywch.github.io/Simple-RT-Task/rt-task_main.js . Second transformation: demo-simple-rt-task-transformed-with-display-element.html The demo-simple-rt-task-transformed-with-display-element.html file in this repository contains three changes from the demo-simple-rt-task-transformed.html . When you open demo-simple-rt-task-transformed-with-display-element.html in a browser, you should see the same reaction time task. Let's look at each change. Change 1: Using display_element By adding the display_element parameter in the jsPsych.init() like below, you can have additional control over the display element, which is important in embedding jsPsych into Qualtrics. In the below example, jsPsych will render the experiment in the <div> called display_stage , which the current script does not have yet. So, let's add the display_stage . /* start the experiment */ jsPsych.init({ timeline: timeline, /* Change 1: Using `display_element` */ display_element: 'display_stage', on_finish: function () { jsPsych.data.displayData(); } }); Change 2: Adding display_stage CSS and Div The display_stage needs below CSS and HTML code after the <body> tag, which also include the display_stage_background . Both are necessary to function well. <style> #display_stage_background { width: 100vw; background-color: white; z-index: -1; } #display_stage { position: fixed; left: 1vw; top: 1vh; height: 98vh; width: 98vw; background-color: white; box-shadow: 1px 1px 1px #999; border-radius: 15px; z-index: 0; overflow-y: hidden; overflow-x: hidden; } </style> <div id='display_stage_background'></div> <div id='display_stage'></div> Change 3: Adding extra scripts for Qualtrics The below scripts are not necessary to run this reaction time experiment, but you need to copy-paste these in Qualtrics later. One critical point is that now we use the jsPsych stylesheet hosted in the GitHub Pages (explained above in the Hosting jsPsych section) instead of the CSS file in your computer. This is important because Qualtrics can also access the GitHub-hosted files. <!-- Change 3: Adding extra scripts for Qualtrics --> <!-- jspsych.css should be availble from your GitHub at https://<your-github-username>.github.io/<your-experiment-name>/jspsych-6.1.0/css/jspsych.css --> <link href=\"https://kywch.github.io/Simple-RT-Task/jspsych-6.1.0/css/jspsych.css\" rel=\"stylesheet\" type=\"text/css\"></link> <div> <span style=\"font-size: 24px;\"> <br><br> If you are seeing this message for <span style=\"color: rgb(255, 0, 0);\"><b>more than 5 minutes</b></span>,<br> please screen-capture this screen and send the image to us. <br><br> <span style=\"font-size: 28px;\">We are very sorry for the inconvenience.</span> </span> </div> Third transformation: demo-simple-rt-task-qualtrics.js The demo-simple-rt-task-qualtrics.js file in this repository contains several changes from demo-simple-rt-task-qualtrics.html and can be put into Qualtrics. By separating the experiment-related code from the operation-related code, converting the html file to Qualtrics JavaScript function is pretty much similar to the Hello-World example . Let's look at each change. Change 1: The Question JavaScript skeleton You need to add your experiment codes to the skeleton provided by Qualtrics Question JavaScript Editor. For details, see the Add JavaScript help page . Qualtrics.SurveyEngine.addOnload(function() { /*Place your JavaScript here to run when the page loads*/ }); Qualtrics.SurveyEngine.addOnReady(function() { /*Place your JavaScript here to run when the page is fully displayed*/ }); Qualtrics.SurveyEngine.addOnUnload(function() { /*Place your JavaScript here to run when the page is unloaded*/ }); Change 2: Hide the Next button The below javascript code hides the Next button and puts the javascript code in the driving seat. // Retrieve Qualtrics object and save in qthis var qthis = this; // Hide buttons qthis.hideNextButton(); Change 3: Define and load required resources The below javascript defines where the necessary files are so that Qualtrics can load these. If you enabled GitHub Pages of your repository, Qualtrics can load the necessary JS, CSS, and image files right away. One way to check whether these files are accessilbe is to view the source of demo-simple-rt-task-transformed.html and click the imported scripts. For example of jspsych.js , https://your-github-username.github.io/your-experiment-name/jspsych-6.1.0/jspsych.js . var task_github = \"https://kywch.github.io/Simple-RT-Task/\"; // https://<your-github-username>.github.io/<your-experiment-name> // requiredResources must include all the JS files that demo-simple-rt-task-transformed.html uses. var requiredResources = [ task_github + \"jspsych-6.1.0/jspsych.js\", task_github + \"jspsych-6.1.0/plugins/jspsych-html-keyboard-response.js\", task_github + \"jspsych-6.1.0/plugins/jspsych-image-keyboard-response.js\", task_github + \"rt-task_main.js\" ]; function loadScript(idx) { console.log(\"Loading \", requiredResources[idx]); jQuery.getScript(requiredResources[idx], function () { if ((idx + 1) < requiredResources.length) { loadScript(idx + 1); } else { initExp(); } }); } if (window.Qualtrics && (!window.frameElement || window.frameElement.id !== \"mobile-preview-view\")) { loadScript(0); } Change 4: Append the display_stage Div using jQuery In Qualtrics, jQuery (loaded by default) is used to append the display_stage_background and display_stage Divs. The CSS for these elements will be added directly to Question HTML later in this tutorial. // jQuery is loaded in Qualtrics by default jQuery(\"<div id = 'display_stage_background'></div>\").appendTo('body'); jQuery(\"<div id = 'display_stage'></div>\").appendTo('body'); Change 5: Wrap jsPsych.init() in a function The main experiment codes are wrapped in the initExp function to make sure it runs after all the necessary library and plugin files are loaded (as defined in the loadScript function above). Change 6: Summarize and save the results to Qualtrics The original jsPsych tutorial shows you how you can process and summarize the experiment results online. Wouldn't it be great if your experiment results are directly included in your Qualtrics data? Well, you can actually do this by summarizing the results online and save those results in Qualtrics' Embedded Data using the setEmbeddedData function. demo-simple-rt-task-qualtrics.js does so when the jsPsych experiment finishes by running the below code (from debrief_block ). jsPsych.init({ timeline: timeline, display_element: 'display_stage', on_finish: function (data) { /* Change 6: Summarize and save the results to Qualtrics */ // summarize the results var trials = jsPsych.data.get().filter({ test_part: 'test' }); var correct_trials = trials.filter({ correct: true }); var accuracy = Math.round(correct_trials.count() / trials.count() * 100); var rt = Math.round(correct_trials.select('rt').mean()); // save to qualtrics embedded data Qualtrics.SurveyEngine.setEmbeddedData(\"accuracy\", accuracy); Qualtrics.SurveyEngine.setEmbeddedData(\"rt\", rt); /* Change 7: Add the clean up and continue functions.*/ // clear the stage jQuery('display_stage').remove(); jQuery('display_stage_background').remove(); // simulate click on Qualtrics \"next\" button, making use of the Qualtrics JS API qthis.clickNextButton(); } }); Change 7: Add the clean up and continue functions When the jsPsych ends, display_stage and display_stage_background should be removed. Then, execulte the clickNextButton to simulate clicking the Next button and proceed to the next question. Finally, embedding jsPsych in Qualtrics Let's log in to Qualtrics and take a look at each step. Step 1. Create a new Qualtrics project and then a new question This tutorial assumes that readers are much more familiar with Qualtrics. For Qualtrics tutorial, there are other excellent tutorials available like this Qualtrics User Guide . To continue, please create a new Qualtrics project. Then, create a new question and (1) change its format to Text/Graphic . Step 2. Open the Question JavaScript editor and copy paste the whole demo-simple-rt-task-qualtrics.js Keep going in the above picture. (2) Click the gear to open the dropdown menu, and then (3) find and click Add JavaScript . Step 3. Open the Question HTML editor and copy paste the portion of demo-simple-rt-task-transformed-with-display-element.html The Change 3 section of the demo-simple-rt-task-transformed-with-display-element.html file contains the link to jsPsych CSS file, the inline styles for display_stage Div, and the error message to be displayed when things go wrong. To open the HTML editor, click the HTML View button. Then, copy paste the portion of demo-simple-rt-task-transformed-with-display-element.html to the HTML editor, starting from <!-- COPY PASTE TO QUALTRICS FROM HERE --> to <!-- COPY PASTE TO QUALTRICS UP TO HERE --> . After copy pasting, you should see something like below. Step 4. Creating Embedded Data elements To store the experiment results -- accuracy and rt -- in Qualtrics, you need to create the Embedded Data elements named accuracy and rt in your survey by following this Qualtrics tutorial . Click Survey Flow from the Survey tab Click Add a New Element Here Choose Embedded Data Click Create New Field or Choose From Dropdown and type accuracy Click Set a Value Now and type -1 Click Add a New Field and type rt Click Set a Value Now and type -1 Step 5. Move Set Embedded Data block to the top of Survey Flow The accuracy and rt fields should be defined before the jsPsych reaction time task, so you need to move the Embedded Data block to the top of the Survey Flow. Click and hold down Move to drag the Embedded Data to the top of the Survey Flow. After this, you should see the Survey Flow like below. Step 6. Add a check for the Embedded Data You should make sure that the experiment results are saved correctly. You can do so by showing the accuracy and rt Embedded Data after the reaction task. Click Add Page Break Click Create a New Question Change Question Type to Text/Graphic Type ${e://Field/accuracy} and ${e://Field/rt} to access these Embedded Data Step 7. Publish and test! Publish the survey by following this Qualtrics tutorial . Then, an anonymous Qualtrics link is generated. If you click this link, you should be able to see the same reaction time task running in Qualtrics. For example, try this Qualtrics link .","title":"Reaction-time task"},{"location":"rt-task/#embedding-the-jspsych-simple-reaction-time-task-into-qualtrics","text":"Let's start from the original jsPsych Simple Reaction Time Task and embed it to qualtrics.","title":"Embedding the jsPsych Simple Reaction Time Task into Qualtrics"},{"location":"rt-task/#the-start-demo-simple-rt-taskhtml","text":"The experiment code, demo-simple-rt-task.html is included in the examples folder in the jsPsych repository . Let's make the code work in a separate folder like the hello-world example . To do so, you need to change the url of jsPsych scripts, stylesheet, and stimuli of the experiment code. In this tutorial, we will change those twice to make the rt-task (1) run on a new folder and (2) use the GitHub-hosted resources. First, let's make it run locally. To do so, The jsPsych library, plugins, and stylesheet come from the local folder. As you can see, the demo-simple-rt-task.html in this repository looks at the local jspsych-6.1.0 folder for these files. <script src=\"jspsych-6.1.0/jspsych.js\"></script> <script src=\"jspsych-6.1.0/plugins/jspsych-html-keyboard-response.js\"></script> <script src=\"jspsych-6.1.0/plugins/jspsych-image-keyboard-response.js\"></script> <link rel=\"stylesheet\" href=\"jspsych-6.1.0/css/jspsych.css\"></link> The experiment also needs stimuli images (see the original jsPsych tutorial ). So, you need to create a folder called img in the experiment folder and copy blue.png and orange.png into the img folder. Your folder should look like this.","title":"The start: demo-simple-rt-task.html"},{"location":"rt-task/#hosting-this-task-in-github","text":"To use jsPsych in Qualtrics, the jsPsych javascript and CSS files need to be online and loadable from Qualtrics. Creating a GitHub repository for your experiment helps you do so in simple steps.","title":"Hosting this task in GitHub"},{"location":"rt-task/#step-0-create-a-github-account","text":"Go to the GitHub site and create your account.","title":"Step 0. Create a GitHub account"},{"location":"rt-task/#step-1-create-a-new-github-repository","text":"Create a repository for your experiment by following this Create a repo guide .","title":"Step 1. Create a new GitHub repository"},{"location":"rt-task/#step-2-add-experiment-files-to-the-repository","text":"Upload your experiment files to the repository. The easy way is to drag and drop your files like this Adding a file to a repository guide . Do NOT forget to click the Commit changes button. My Simple-RT-Task repository looks like this: https://github.com/kywch/Simple-RT-Task/ .","title":"Step 2. Add experiment files to the repository"},{"location":"rt-task/#step-3-click-the-settings-button","text":"Click the Settings button on the repository home page.","title":"Step 3. Click the Settings button"},{"location":"rt-task/#step-4-enable-github-pages-for-your-experiment","text":"Scroll down and find the GitHub Pages section. Select the Source to be the master branch . Within a few minutes, a website will be available at https://<your-github-username>.github.io/<your-experiment-name>/ . How do you know the page is up and running? Well, let's try to access the jspsych.css file by going into https://<your-github-username>.github.io/<your-experiment-name>/jspsych-6.1.0/css/jspsych.css . For example, https://kywch.github.io/Simple-RT-Task/jspsych-6.1.0/css/jspsych.css .","title":"Step 4. Enable GitHub Pages for your experiment"},{"location":"rt-task/#wait-did-you-know","text":"Did you know that you also accidentally made your task online that anyone with the Internet can try your task? Open your browser and go to https://<your-github-username>.github.io/<your-experiment-name>/demo-simple-rt-task.html , or try mine: https://kywch.github.io/Simple-RT-Task/demo-simple-rt-task.html . If your expeirment doesnt' work, (this may sound silly but worked for me) try to turn off and on the GitHub Pages multiple times (i.e., switching the Source to be None and master branch ).","title":"WAIT, did you know?"},{"location":"rt-task/#first-transformation-demo-simple-rt-task-transformedhtml-and-rt-task_mainjs","text":"I prefer to separate out the experiment-related code from the operation-related code, following the Experiment Factory style. If you haven't, please visit the Experiment Factory library , which contain a ton of experiments with running demos and their code. In the demo-simple-rt-task.html , constructing the timeline can be considered to be experiment-related, and the remaining parts that also appear in the Hello-World example , such as loading jspsych.js and jsPsych.init() can be considered to be operation-related. Here, I am separating the experiment-related code and the operation-related code and putting the code into rt-task_main.js and demo-simple-rt-task-transformed.html , respectively, by following steps:","title":"First transformation: demo-simple-rt-task-transformed.html and rt-task_main.js"},{"location":"rt-task/#step-1-copy-demo-simple-rt-taskhtml-to-demo-simple-rt-task-transformedhtml","text":"","title":"Step 1. Copy demo-simple-rt-task.html to demo-simple-rt-task-transformed.html"},{"location":"rt-task/#step-2-create-a-new-file-rt-task_mainjs","text":"And open rt-task_main.js in a new editor window.","title":"Step 2. Create a new file rt-task_main.js"},{"location":"rt-task/#step-3-cut-and-paste-the-experiment-related-code","text":"Open demo-simple-rt-task-transformed.html . You should have both rt-task_main.js and demo-simple-rt-task-transformed.html opened. Select the code from the /* create timeline */ line to the timeline.push(debrief_block); line, cut the selection , and paste it to rt-task_main.js . REPEAT . The code is being cut-and-pasted (NOT copy-pasted). /* create timeline */ var timeline = []; /* define welcome message trial */ var welcome_block = { type: \"html-keyboard-response\", stimulus: \"Welcome to the experiment. Press any key to begin.\" }; timeline.push(welcome_block); /* define instructions trial */ var instructions = { type: \"html-keyboard-response\", stimulus: \"<p>In this experiment, a circle will appear in the center \" + \"of the screen.</p><p>If the circle is <strong>blue</strong>, \" + \"press the letter F on the keyboard as fast as you can.</p>\" + \"<p>If the circle is <strong>orange</strong>, press the letter J \" + \"as fast as you can.</p>\" + \"<div style='width: 700px;'>\"+ \"<div style='float: left;'><img src='img/blue.png'></img>\" + \"<p class='small'><strong>Press the F key</strong></p></div>\" + \"<div class='float: right;'><img src='img/orange.png'></img>\" + \"<p class='small'><strong>Press the J key</strong></p></div>\" + \"</div>\"+ \"<p>Press any key to begin.</p>\", post_trial_gap: 2000 }; timeline.push(instructions); /* test trials */ var test_stimuli = [ { stimulus: \"img/blue.png\", data: { test_part: 'test', correct_response: 'f' } }, { stimulus: \"img/orange.png\", data: { test_part: 'test', correct_response: 'j' } } ]; var fixation = { type: 'html-keyboard-response', stimulus: '<div style=\"font-size:60px;\">+</div>', choices: jsPsych.NO_KEYS, trial_duration: function(){ return jsPsych.randomization.sampleWithoutReplacement([250, 500, 750, 1000, 1250, 1500, 1750, 2000], 1)[0]; }, data: {test_part: 'fixation'} } var test = { type: \"image-keyboard-response\", stimulus: jsPsych.timelineVariable('stimulus'), choices: ['f', 'j'], data: jsPsych.timelineVariable('data'), on_finish: function(data){ data.correct = data.key_press == jsPsych.pluginAPI.convertKeyCharacterToKeyCode(data.correct_response); }, } var test_procedure = { timeline: [fixation, test], timeline_variables: test_stimuli, repetitions: 5, randomize_order: true } timeline.push(test_procedure); /* define debrief */ var debrief_block = { type: \"html-keyboard-response\", stimulus: function() { var trials = jsPsych.data.get().filter({test_part: 'test'}); var correct_trials = trials.filter({correct: true}); var accuracy = Math.round(correct_trials.count() / trials.count() * 100); var rt = Math.round(correct_trials.select('rt').mean()); return \"<p>You responded correctly on \"+accuracy+\"% of the trials.</p>\"+ \"<p>Your average response time was \"+rt+\"ms.</p>\"+ \"<p>Press any key to complete the experiment. Thank you!</p>\"; } }; timeline.push(debrief_block);","title":"Step 3. Cut and paste the experiment-related code"},{"location":"rt-task/#step-4-rt-task_mainjs-use-the-github-hosted-stimuli-images","text":"The above code uses the stimuli images in the img folder placed with the experiment html. But since you also put these images in your GitHub repository and made these available through the Internet, you can also use these images. The img/blue.png is available at https://<your-github-username>.github.io/<your-experiment-name>/img/blue.png . For example, https://kywch.github.io/Simple-RT-Task/img/blue.png . And, the img/orange.png is available at https://<your-github-username>.github.io/<your-experiment-name>/img/orange.png . For example, https://kywch.github.io/Simple-RT-Task/img/orange.png . The rt-task_main.js in this tutorial has a few changes to use the GitHub-hosted images. Let's see these changes.","title":"Step 4. rt-task_main.js: Use the GitHub-hosted stimuli images"},{"location":"rt-task/#change-1-adding-the-image-hosting-site","text":"The repo_site variable was added to locate the site that hosts stimuli images. You can easily use your repository by changing this line. // define the site that hosts stimuli images // usually https://<your-github-username>.github.io/<your-experiment-name>/ var repo_site = \"https://kywch.github.io/Simple-RT-Task/\";","title":"Change 1: Adding the image hosting site"},{"location":"rt-task/#change-2-adding-repo_site-in-instructions","text":"The repo_site variable should be added to wherever img/blue.png and img/orange.png are used like the below. The find function really helps in doing so. var instructions = { type: \"html-keyboard-response\", stimulus: \"<p>In this experiment, a circle will appear in the center \" + \"of the screen.</p><p>If the circle is <strong>blue</strong>, \" + \"press the letter F on the keyboard as fast as you can.</p>\" + \"<p>If the circle is <strong>orange</strong>, press the letter J \" + \"as fast as you can.</p>\" + \"<div style='width: 700px;'>\" + \"<div style='float: left;'><img src='\" + repo_site + \"img/blue.png'></img>\" + // Change 2: Adding `repo_site` in `instructions` \"<p class='small'><strong>Press the F key</strong></p></div>\" + \"<div class='float: right;'><img src='\" + repo_site + \"img/orange.png'></img>\" + // Change 2: Adding `repo_site` in `instructions` \"<p class='small'><strong>Press the J key</strong></p></div>\" + \"</div>\" + \"<p>Press any key to begin.</p>\", post_trial_gap: 2000 };","title":"Change 2: Adding repo_site in instructions"},{"location":"rt-task/#change-3-adding-repo_site-in-test_stimuli","text":"var test_stimuli = [{ stimulus: repo_site + \"img/blue.png\", // Change 3: Adding `repo_site` in `test_stimuli` data: { test_part: 'test', correct_response: 'f' } }, { stimulus: repo_site + \"img/orange.png\", // Change 3: Adding `repo_site` in `test_stimuli` data: { test_part: 'test', correct_response: 'j' } } ];","title":"Change 3: Adding repo_site in test_stimuli"},{"location":"rt-task/#step-5-demo-simple-rt-task-transformedhtml-import-rt-task_mainjs","text":"Cutting the experiment-related code makes the demo-simple-rt-task-transformed.html file much shorter. To make demo-simple-rt-task-transformed.html work, you need to load rt-task_main.js by using a <script> tag like the other jspsych plugin files (see the original jsPsych tutorial ). <!-- CHANGE: Loading the external main experiment script --> <script src=\"rt-task_main.js\"></script> After making these changes, don't forget to SAVE !","title":"Step 5. demo-simple-rt-task-transformed.html: Import rt-task_main.js"},{"location":"rt-task/#does-this-work","text":"Let's find out by opening demo-simple-rt-task-transformed.html in a browser.","title":"Does this work?"},{"location":"rt-task/#step-6-upload-demo-simple-rt-task-transformedhtml-and-rt-task_mainjs-to-github","text":"If this works, let's upload demo-simple-rt-task-transformed.html and rt-task_main.js to your GitHub repository so that your task also runs over the Internet. After uploading both scripts (and waiting for a few minutes), you should be able to access https://<your-github-username>.github.io/<your-experiment-name>/demo-simple-rt-task-transformed.html . For example, https://kywch.github.io/Simple-RT-Task/demo-simple-rt-task-transformed.html . If the above link works, then it also means that the experiment-related code, rt-task_main.js , is also available for Qualtrics to load. You can actually access it by going to https://<your-github-username>.github.io/<your-experiment-name>/rt-task_main.js . For example, https://kywch.github.io/Simple-RT-Task/rt-task_main.js .","title":"Step 6: Upload demo-simple-rt-task-transformed.html and rt-task_main.js to GitHub"},{"location":"rt-task/#second-transformation-demo-simple-rt-task-transformed-with-display-elementhtml","text":"The demo-simple-rt-task-transformed-with-display-element.html file in this repository contains three changes from the demo-simple-rt-task-transformed.html . When you open demo-simple-rt-task-transformed-with-display-element.html in a browser, you should see the same reaction time task. Let's look at each change.","title":"Second transformation: demo-simple-rt-task-transformed-with-display-element.html"},{"location":"rt-task/#change-1-using-display_element","text":"By adding the display_element parameter in the jsPsych.init() like below, you can have additional control over the display element, which is important in embedding jsPsych into Qualtrics. In the below example, jsPsych will render the experiment in the <div> called display_stage , which the current script does not have yet. So, let's add the display_stage . /* start the experiment */ jsPsych.init({ timeline: timeline, /* Change 1: Using `display_element` */ display_element: 'display_stage', on_finish: function () { jsPsych.data.displayData(); } });","title":"Change 1: Using display_element"},{"location":"rt-task/#change-2-adding-display_stage-css-and-div","text":"The display_stage needs below CSS and HTML code after the <body> tag, which also include the display_stage_background . Both are necessary to function well. <style> #display_stage_background { width: 100vw; background-color: white; z-index: -1; } #display_stage { position: fixed; left: 1vw; top: 1vh; height: 98vh; width: 98vw; background-color: white; box-shadow: 1px 1px 1px #999; border-radius: 15px; z-index: 0; overflow-y: hidden; overflow-x: hidden; } </style> <div id='display_stage_background'></div> <div id='display_stage'></div>","title":"Change 2: Adding display_stage CSS and Div"},{"location":"rt-task/#change-3-adding-extra-scripts-for-qualtrics","text":"The below scripts are not necessary to run this reaction time experiment, but you need to copy-paste these in Qualtrics later. One critical point is that now we use the jsPsych stylesheet hosted in the GitHub Pages (explained above in the Hosting jsPsych section) instead of the CSS file in your computer. This is important because Qualtrics can also access the GitHub-hosted files. <!-- Change 3: Adding extra scripts for Qualtrics --> <!-- jspsych.css should be availble from your GitHub at https://<your-github-username>.github.io/<your-experiment-name>/jspsych-6.1.0/css/jspsych.css --> <link href=\"https://kywch.github.io/Simple-RT-Task/jspsych-6.1.0/css/jspsych.css\" rel=\"stylesheet\" type=\"text/css\"></link> <div> <span style=\"font-size: 24px;\"> <br><br> If you are seeing this message for <span style=\"color: rgb(255, 0, 0);\"><b>more than 5 minutes</b></span>,<br> please screen-capture this screen and send the image to us. <br><br> <span style=\"font-size: 28px;\">We are very sorry for the inconvenience.</span> </span> </div>","title":"Change 3: Adding extra scripts for Qualtrics"},{"location":"rt-task/#third-transformation-demo-simple-rt-task-qualtricsjs","text":"The demo-simple-rt-task-qualtrics.js file in this repository contains several changes from demo-simple-rt-task-qualtrics.html and can be put into Qualtrics. By separating the experiment-related code from the operation-related code, converting the html file to Qualtrics JavaScript function is pretty much similar to the Hello-World example . Let's look at each change.","title":"Third transformation: demo-simple-rt-task-qualtrics.js"},{"location":"rt-task/#change-1-the-question-javascript-skeleton","text":"You need to add your experiment codes to the skeleton provided by Qualtrics Question JavaScript Editor. For details, see the Add JavaScript help page . Qualtrics.SurveyEngine.addOnload(function() { /*Place your JavaScript here to run when the page loads*/ }); Qualtrics.SurveyEngine.addOnReady(function() { /*Place your JavaScript here to run when the page is fully displayed*/ }); Qualtrics.SurveyEngine.addOnUnload(function() { /*Place your JavaScript here to run when the page is unloaded*/ });","title":"Change 1: The Question JavaScript skeleton"},{"location":"rt-task/#change-2-hide-the-next-button","text":"The below javascript code hides the Next button and puts the javascript code in the driving seat. // Retrieve Qualtrics object and save in qthis var qthis = this; // Hide buttons qthis.hideNextButton();","title":"Change 2: Hide the Next button"},{"location":"rt-task/#change-3-define-and-load-required-resources","text":"The below javascript defines where the necessary files are so that Qualtrics can load these. If you enabled GitHub Pages of your repository, Qualtrics can load the necessary JS, CSS, and image files right away. One way to check whether these files are accessilbe is to view the source of demo-simple-rt-task-transformed.html and click the imported scripts. For example of jspsych.js , https://your-github-username.github.io/your-experiment-name/jspsych-6.1.0/jspsych.js . var task_github = \"https://kywch.github.io/Simple-RT-Task/\"; // https://<your-github-username>.github.io/<your-experiment-name> // requiredResources must include all the JS files that demo-simple-rt-task-transformed.html uses. var requiredResources = [ task_github + \"jspsych-6.1.0/jspsych.js\", task_github + \"jspsych-6.1.0/plugins/jspsych-html-keyboard-response.js\", task_github + \"jspsych-6.1.0/plugins/jspsych-image-keyboard-response.js\", task_github + \"rt-task_main.js\" ]; function loadScript(idx) { console.log(\"Loading \", requiredResources[idx]); jQuery.getScript(requiredResources[idx], function () { if ((idx + 1) < requiredResources.length) { loadScript(idx + 1); } else { initExp(); } }); } if (window.Qualtrics && (!window.frameElement || window.frameElement.id !== \"mobile-preview-view\")) { loadScript(0); }","title":"Change 3: Define and load required resources"},{"location":"rt-task/#change-4-append-the-display_stage-div-using-jquery","text":"In Qualtrics, jQuery (loaded by default) is used to append the display_stage_background and display_stage Divs. The CSS for these elements will be added directly to Question HTML later in this tutorial. // jQuery is loaded in Qualtrics by default jQuery(\"<div id = 'display_stage_background'></div>\").appendTo('body'); jQuery(\"<div id = 'display_stage'></div>\").appendTo('body');","title":"Change 4: Append the display_stage Div using jQuery"},{"location":"rt-task/#change-5-wrap-jspsychinit-in-a-function","text":"The main experiment codes are wrapped in the initExp function to make sure it runs after all the necessary library and plugin files are loaded (as defined in the loadScript function above).","title":"Change 5: Wrap jsPsych.init() in a function"},{"location":"rt-task/#change-6-summarize-and-save-the-results-to-qualtrics","text":"The original jsPsych tutorial shows you how you can process and summarize the experiment results online. Wouldn't it be great if your experiment results are directly included in your Qualtrics data? Well, you can actually do this by summarizing the results online and save those results in Qualtrics' Embedded Data using the setEmbeddedData function. demo-simple-rt-task-qualtrics.js does so when the jsPsych experiment finishes by running the below code (from debrief_block ). jsPsych.init({ timeline: timeline, display_element: 'display_stage', on_finish: function (data) { /* Change 6: Summarize and save the results to Qualtrics */ // summarize the results var trials = jsPsych.data.get().filter({ test_part: 'test' }); var correct_trials = trials.filter({ correct: true }); var accuracy = Math.round(correct_trials.count() / trials.count() * 100); var rt = Math.round(correct_trials.select('rt').mean()); // save to qualtrics embedded data Qualtrics.SurveyEngine.setEmbeddedData(\"accuracy\", accuracy); Qualtrics.SurveyEngine.setEmbeddedData(\"rt\", rt); /* Change 7: Add the clean up and continue functions.*/ // clear the stage jQuery('display_stage').remove(); jQuery('display_stage_background').remove(); // simulate click on Qualtrics \"next\" button, making use of the Qualtrics JS API qthis.clickNextButton(); } });","title":"Change 6: Summarize and save the results to Qualtrics"},{"location":"rt-task/#change-7-add-the-clean-up-and-continue-functions","text":"When the jsPsych ends, display_stage and display_stage_background should be removed. Then, execulte the clickNextButton to simulate clicking the Next button and proceed to the next question.","title":"Change 7: Add the clean up and continue functions"},{"location":"rt-task/#finally-embedding-jspsych-in-qualtrics","text":"Let's log in to Qualtrics and take a look at each step.","title":"Finally, embedding jsPsych in Qualtrics"},{"location":"rt-task/#step-1-create-a-new-qualtrics-project-and-then-a-new-question","text":"This tutorial assumes that readers are much more familiar with Qualtrics. For Qualtrics tutorial, there are other excellent tutorials available like this Qualtrics User Guide . To continue, please create a new Qualtrics project. Then, create a new question and (1) change its format to Text/Graphic .","title":"Step 1. Create a new Qualtrics project and then a new question"},{"location":"rt-task/#step-2-open-the-question-javascript-editor-and-copy-paste-the-whole-demo-simple-rt-task-qualtricsjs","text":"Keep going in the above picture. (2) Click the gear to open the dropdown menu, and then (3) find and click Add JavaScript .","title":"Step 2. Open the Question JavaScript editor and copy paste the whole demo-simple-rt-task-qualtrics.js"},{"location":"rt-task/#step-3-open-the-question-html-editor-and-copy-paste-the-portion-of-demo-simple-rt-task-transformed-with-display-elementhtml","text":"The Change 3 section of the demo-simple-rt-task-transformed-with-display-element.html file contains the link to jsPsych CSS file, the inline styles for display_stage Div, and the error message to be displayed when things go wrong. To open the HTML editor, click the HTML View button. Then, copy paste the portion of demo-simple-rt-task-transformed-with-display-element.html to the HTML editor, starting from <!-- COPY PASTE TO QUALTRICS FROM HERE --> to <!-- COPY PASTE TO QUALTRICS UP TO HERE --> . After copy pasting, you should see something like below.","title":"Step 3. Open the Question HTML editor and copy paste the portion of demo-simple-rt-task-transformed-with-display-element.html"},{"location":"rt-task/#step-4-creating-embedded-data-elements","text":"To store the experiment results -- accuracy and rt -- in Qualtrics, you need to create the Embedded Data elements named accuracy and rt in your survey by following this Qualtrics tutorial . Click Survey Flow from the Survey tab Click Add a New Element Here Choose Embedded Data Click Create New Field or Choose From Dropdown and type accuracy Click Set a Value Now and type -1 Click Add a New Field and type rt Click Set a Value Now and type -1","title":"Step 4. Creating Embedded Data elements"},{"location":"rt-task/#step-5-move-set-embedded-data-block-to-the-top-of-survey-flow","text":"The accuracy and rt fields should be defined before the jsPsych reaction time task, so you need to move the Embedded Data block to the top of the Survey Flow. Click and hold down Move to drag the Embedded Data to the top of the Survey Flow. After this, you should see the Survey Flow like below.","title":"Step 5. Move Set Embedded Data block to the top of Survey Flow"},{"location":"rt-task/#step-6-add-a-check-for-the-embedded-data","text":"You should make sure that the experiment results are saved correctly. You can do so by showing the accuracy and rt Embedded Data after the reaction task. Click Add Page Break Click Create a New Question Change Question Type to Text/Graphic Type ${e://Field/accuracy} and ${e://Field/rt} to access these Embedded Data","title":"Step 6. Add a check for the Embedded Data"},{"location":"rt-task/#step-7-publish-and-test","text":"Publish the survey by following this Qualtrics tutorial . Then, an anonymous Qualtrics link is generated. If you click this link, you should be able to see the same reaction time task running in Qualtrics. For example, try this Qualtrics link .","title":"Step 7. Publish and test!"}]}